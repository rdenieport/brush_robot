
brushless.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012c8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08001474  08001474  00011474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001540  08001540  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001540  08001540  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001540  08001540  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001540  08001540  00011540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001544  08001544  00011544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001548  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000004  0800154c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  0800154c  00020038  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7af  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020b8  00000000  00000000  0002c7e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00004aed  00000000  00000000  0002e89b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000330  00000000  00000000  00033388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001670  00000000  00000000  000336b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023221  00000000  00000000  00034d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000084b5  00000000  00000000  00057f49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2a98  00000000  00000000  000603fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00122e96  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000754  00000000  00000000  00122eec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000004 	.word	0x20000004
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800145c 	.word	0x0800145c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000008 	.word	0x20000008
 80001e8:	0800145c 	.word	0x0800145c

080001ec <MX_GPIO_Init>:
     PC1   ------> ADCx_IN2
     PC2   ------> ADCx_IN3
     PC3   ------> ADCx_IN4
*/
void MX_GPIO_Init(void)
{
 80001ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80001f0:	2400      	movs	r4, #0
{
 80001f2:	b08f      	sub	sp, #60	; 0x3c
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001f4:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80001f8:	e9cd 4404 	strd	r4, r4, [sp, #16]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001fc:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000200:	4b7c      	ldr	r3, [pc, #496]	; (80003f4 <MX_GPIO_Init+0x208>)
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000202:	9406      	str	r4, [sp, #24]
 8000204:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8000206:	4d7c      	ldr	r5, [pc, #496]	; (80003f8 <MX_GPIO_Init+0x20c>)
 8000208:	f042 0204 	orr.w	r2, r2, #4
 800020c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800020e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000210:	f002 0204 	and.w	r2, r2, #4
 8000214:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8000216:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000218:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800021a:	f042 0201 	orr.w	r2, r2, #1
 800021e:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000220:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000222:	f002 0201 	and.w	r2, r2, #1
 8000226:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000228:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800022a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800022c:	f042 0202 	orr.w	r2, r2, #2
 8000230:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000234:	f003 0302 	and.w	r3, r3, #2
 8000238:	9301      	str	r3, [sp, #4]
 800023a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
  (void)tmpreg;
 800023e:	9a01      	ldr	r2, [sp, #4]
 8000240:	62ab      	str	r3, [r5, #40]	; 0x28

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000242:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8000244:	220f      	movs	r2, #15
 8000246:	2303      	movs	r3, #3
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000248:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 800024a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800024e:	940c      	str	r4, [sp, #48]	; 0x30

  /**/
  GPIO_InitStruct.Pin = EN_U_Pin|EN_V_Pin|EN_W_Pin|CS2_Pin;
 8000250:	2602      	movs	r6, #2
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000252:	f000 fd95 	bl	8000d80 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = EN_U_Pin|EN_V_Pin|EN_W_Pin|CS2_Pin;
 8000256:	2700      	movs	r7, #0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000258:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = EN_U_Pin|EN_V_Pin|EN_W_Pin|CS2_Pin;
 800025a:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 800025e:	2301      	movs	r3, #1
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000260:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = EN_U_Pin|EN_V_Pin|EN_W_Pin|CS2_Pin;
 8000262:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8000266:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800026a:	940c      	str	r4, [sp, #48]	; 0x30
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800026c:	f000 fd88 	bl	8000d80 <LL_GPIO_Init>
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000270:	4b62      	ldr	r3, [pc, #392]	; (80003fc <MX_GPIO_Init+0x210>)
 8000272:	689a      	ldr	r2, [r3, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000274:	210f      	movs	r1, #15
 8000276:	f022 020f 	bic.w	r2, r2, #15
 800027a:	fa91 f1a1 	rbit	r1, r1
 800027e:	609a      	str	r2, [r3, #8]
 8000280:	689a      	ldr	r2, [r3, #8]
 8000282:	21f0      	movs	r1, #240	; 0xf0
 8000284:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000288:	fa91 f1a1 	rbit	r1, r1
 800028c:	609a      	str	r2, [r3, #8]
 800028e:	689a      	ldr	r2, [r3, #8]
 8000290:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8000294:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8000298:	fa91 f1a1 	rbit	r1, r1
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE2);

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
  EXTI_InitStruct.LineCommand = ENABLE;
 800029c:	2401      	movs	r4, #1
 800029e:	609a      	str	r2, [r3, #8]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 80002a0:	2503      	movs	r5, #3
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 80002a2:	f04f 0801 	mov.w	r8, #1
 80002a6:	f04f 0900 	mov.w	r9, #0
  LL_EXTI_Init(&EXTI_InitStruct);
 80002aa:	a804      	add	r0, sp, #16
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 80002ac:	e9cd 8904 	strd	r8, r9, [sp, #16]
  EXTI_InitStruct.LineCommand = ENABLE;
 80002b0:	f8ad 4018 	strh.w	r4, [sp, #24]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 80002b4:	f88d 501a 	strb.w	r5, [sp, #26]
  LL_EXTI_Init(&EXTI_InitStruct);
 80002b8:	f000 fca2 	bl	8000c00 <LL_EXTI_Init>
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
  EXTI_InitStruct.LineCommand = ENABLE;
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
  LL_EXTI_Init(&EXTI_InitStruct);
 80002bc:	a804      	add	r0, sp, #16
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 80002be:	e9cd 6704 	strd	r6, r7, [sp, #16]
  EXTI_InitStruct.LineCommand = ENABLE;
 80002c2:	f8ad 4018 	strh.w	r4, [sp, #24]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 80002c6:	f88d 501a 	strb.w	r5, [sp, #26]
  LL_EXTI_Init(&EXTI_InitStruct);
 80002ca:	f000 fc99 	bl	8000c00 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 80002ce:	2204      	movs	r2, #4
 80002d0:	2300      	movs	r3, #0
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
  EXTI_InitStruct.LineCommand = ENABLE;
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
  LL_EXTI_Init(&EXTI_InitStruct);
 80002d2:	a804      	add	r0, sp, #16
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 80002d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  EXTI_InitStruct.LineCommand = ENABLE;
 80002d8:	f8ad 4018 	strh.w	r4, [sp, #24]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 80002dc:	f88d 501a 	strb.w	r5, [sp, #26]
  LL_EXTI_Init(&EXTI_InitStruct);
 80002e0:	f000 fc8e 	bl	8000c00 <LL_EXTI_Init>
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80002e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002e8:	68da      	ldr	r2, [r3, #12]
 80002ea:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80002ee:	b134      	cbz	r4, 80002fe <MX_GPIO_Init+0x112>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80002f0:	fab4 f484 	clz	r4, r4
 80002f4:	0064      	lsls	r4, r4, #1
 80002f6:	fa05 f404 	lsl.w	r4, r5, r4
 80002fa:	ea22 0204 	bic.w	r2, r2, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002fe:	2301      	movs	r3, #1
 8000300:	fa93 f3a3 	rbit	r3, r3
 8000304:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000308:	2302      	movs	r3, #2
 800030a:	60ca      	str	r2, [r1, #12]
 800030c:	68ca      	ldr	r2, [r1, #12]
 800030e:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8000312:	b13b      	cbz	r3, 8000324 <MX_GPIO_Init+0x138>
  return __builtin_clz(value);
 8000314:	fab3 f383 	clz	r3, r3
 8000318:	005b      	lsls	r3, r3, #1
 800031a:	2103      	movs	r1, #3
 800031c:	fa01 f303 	lsl.w	r3, r1, r3
 8000320:	ea22 0203 	bic.w	r2, r2, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000324:	2302      	movs	r3, #2
 8000326:	fa93 f3a3 	rbit	r3, r3
 800032a:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800032e:	2304      	movs	r3, #4
 8000330:	60ca      	str	r2, [r1, #12]
 8000332:	68ca      	ldr	r2, [r1, #12]
 8000334:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8000338:	b13b      	cbz	r3, 800034a <MX_GPIO_Init+0x15e>
  return __builtin_clz(value);
 800033a:	fab3 f383 	clz	r3, r3
 800033e:	005b      	lsls	r3, r3, #1
 8000340:	2103      	movs	r1, #3
 8000342:	fa01 f303 	lsl.w	r3, r1, r3
 8000346:	ea22 0203 	bic.w	r2, r2, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800034a:	2304      	movs	r3, #4
 800034c:	fa93 f3a3 	rbit	r3, r3
 8000350:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000354:	2301      	movs	r3, #1
 8000356:	60ca      	str	r2, [r1, #12]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000358:	680a      	ldr	r2, [r1, #0]
 800035a:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800035e:	b13b      	cbz	r3, 8000370 <MX_GPIO_Init+0x184>
  return __builtin_clz(value);
 8000360:	fab3 f383 	clz	r3, r3
 8000364:	005b      	lsls	r3, r3, #1
 8000366:	2103      	movs	r1, #3
 8000368:	fa01 f303 	lsl.w	r3, r1, r3
 800036c:	ea22 0203 	bic.w	r2, r2, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000370:	2301      	movs	r3, #1
 8000372:	fa93 f3a3 	rbit	r3, r3
 8000376:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800037a:	2302      	movs	r3, #2
 800037c:	600a      	str	r2, [r1, #0]
 800037e:	680a      	ldr	r2, [r1, #0]
 8000380:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8000384:	b13b      	cbz	r3, 8000396 <MX_GPIO_Init+0x1aa>
  return __builtin_clz(value);
 8000386:	fab3 f383 	clz	r3, r3
 800038a:	005b      	lsls	r3, r3, #1
 800038c:	2103      	movs	r1, #3
 800038e:	fa01 f303 	lsl.w	r3, r1, r3
 8000392:	ea22 0203 	bic.w	r2, r2, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000396:	2302      	movs	r3, #2
 8000398:	fa93 f3a3 	rbit	r3, r3
 800039c:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80003a0:	2304      	movs	r3, #4
 80003a2:	600a      	str	r2, [r1, #0]
 80003a4:	680a      	ldr	r2, [r1, #0]
 80003a6:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80003aa:	b13b      	cbz	r3, 80003bc <MX_GPIO_Init+0x1d0>
  return __builtin_clz(value);
 80003ac:	fab3 f383 	clz	r3, r3
 80003b0:	005b      	lsls	r3, r3, #1
 80003b2:	2103      	movs	r1, #3
 80003b4:	fa01 f303 	lsl.w	r3, r1, r3
 80003b8:	ea22 0203 	bic.w	r2, r2, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003bc:	2304      	movs	r3, #4
 80003be:	fa93 f3a3 	rbit	r3, r3
 80003c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003c6:	490e      	ldr	r1, [pc, #56]	; (8000400 <MX_GPIO_Init+0x214>)
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003c8:	4b0e      	ldr	r3, [pc, #56]	; (8000404 <MX_GPIO_Init+0x218>)
 80003ca:	6002      	str	r2, [r0, #0]
 80003cc:	2200      	movs	r2, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003ce:	68c8      	ldr	r0, [r1, #12]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003d0:	f883 2306 	strb.w	r2, [r3, #774]	; 0x306
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003d4:	2040      	movs	r0, #64	; 0x40
 80003d6:	6018      	str	r0, [r3, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003d8:	68c8      	ldr	r0, [r1, #12]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003da:	f883 2307 	strb.w	r2, [r3, #775]	; 0x307
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003de:	2080      	movs	r0, #128	; 0x80
 80003e0:	6018      	str	r0, [r3, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003e2:	68c9      	ldr	r1, [r1, #12]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003e4:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003ec:	601a      	str	r2, [r3, #0]
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
  NVIC_EnableIRQ(EXTI1_IRQn);
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
  NVIC_EnableIRQ(EXTI2_IRQn);

}
 80003ee:	b00f      	add	sp, #60	; 0x3c
 80003f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80003f4:	40021000 	.word	0x40021000
 80003f8:	48000800 	.word	0x48000800
 80003fc:	40010000 	.word	0x40010000
 8000400:	e000ed00 	.word	0xe000ed00
 8000404:	e000e100 	.word	0xe000e100

08000408 <SystemClock_Config>:
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000408:	4a2d      	ldr	r2, [pc, #180]	; (80004c0 <SystemClock_Config+0xb8>)
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800040a:	b508      	push	{r3, lr}
 800040c:	6813      	ldr	r3, [r2, #0]
 800040e:	f023 0307 	bic.w	r3, r3, #7
 8000412:	f043 0304 	orr.w	r3, r3, #4
 8000416:	6013      	str	r3, [r2, #0]
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000418:	6813      	ldr	r3, [r2, #0]
 800041a:	f003 0307 	and.w	r3, r3, #7
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_4)
 800041e:	2b04      	cmp	r3, #4
 8000420:	d1fa      	bne.n	8000418 <SystemClock_Config+0x10>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000422:	4928      	ldr	r1, [pc, #160]	; (80004c4 <SystemClock_Config+0xbc>)
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000424:	4b28      	ldr	r3, [pc, #160]	; (80004c8 <SystemClock_Config+0xc0>)
 8000426:	680a      	ldr	r2, [r1, #0]
 8000428:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800042c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000430:	600a      	str	r2, [r1, #0]
 8000432:	681a      	ldr	r2, [r3, #0]
 8000434:	f042 0201 	orr.w	r2, r2, #1
 8000438:	601a      	str	r2, [r3, #0]
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 800043a:	681a      	ldr	r2, [r3, #0]
 800043c:	0792      	lsls	r2, r2, #30
 800043e:	d5fc      	bpl.n	800043a <SystemClock_Config+0x32>
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_EnableRangeSelection
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnableRangeSelection(void)
{
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 8000440:	6819      	ldr	r1, [r3, #0]
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8000442:	4a22      	ldr	r2, [pc, #136]	; (80004cc <SystemClock_Config+0xc4>)
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8000444:	4820      	ldr	r0, [pc, #128]	; (80004c8 <SystemClock_Config+0xc0>)
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 8000446:	f041 0108 	orr.w	r1, r1, #8
 800044a:	6019      	str	r1, [r3, #0]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800044c:	6819      	ldr	r1, [r3, #0]
 800044e:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8000452:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 8000456:	6019      	str	r1, [r3, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000458:	6859      	ldr	r1, [r3, #4]
 800045a:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 800045e:	6059      	str	r1, [r3, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8000460:	68d9      	ldr	r1, [r3, #12]
 8000462:	400a      	ands	r2, r1
 8000464:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8000468:	f042 0201 	orr.w	r2, r2, #1
 800046c:	60da      	str	r2, [r3, #12]
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 800046e:	68da      	ldr	r2, [r3, #12]
 8000470:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000474:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800047c:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 800047e:	6803      	ldr	r3, [r0, #0]
 8000480:	019b      	lsls	r3, r3, #6
 8000482:	d5fc      	bpl.n	800047e <SystemClock_Config+0x76>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000484:	6883      	ldr	r3, [r0, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000486:	4a10      	ldr	r2, [pc, #64]	; (80004c8 <SystemClock_Config+0xc0>)
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000488:	f043 0303 	orr.w	r3, r3, #3
 800048c:	6083      	str	r3, [r0, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800048e:	6893      	ldr	r3, [r2, #8]
 8000490:	f003 030c 	and.w	r3, r3, #12

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000494:	2b0c      	cmp	r3, #12
 8000496:	d1fa      	bne.n	800048e <SystemClock_Config+0x86>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000498:	6893      	ldr	r3, [r2, #8]
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);

  LL_Init1msTick(80000000);
 800049a:	480d      	ldr	r0, [pc, #52]	; (80004d0 <SystemClock_Config+0xc8>)
 800049c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80004a0:	6093      	str	r3, [r2, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80004a2:	6893      	ldr	r3, [r2, #8]
 80004a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80004a8:	6093      	str	r3, [r2, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80004aa:	6893      	ldr	r3, [r2, #8]
 80004ac:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80004b0:	6093      	str	r3, [r2, #8]
 80004b2:	f000 ff91 	bl	80013d8 <LL_Init1msTick>

  LL_SetSystemCoreClock(80000000);
}
 80004b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LL_SetSystemCoreClock(80000000);
 80004ba:	4805      	ldr	r0, [pc, #20]	; (80004d0 <SystemClock_Config+0xc8>)
 80004bc:	f000 bf9c 	b.w	80013f8 <LL_SetSystemCoreClock>
 80004c0:	40022000 	.word	0x40022000
 80004c4:	40007000 	.word	0x40007000
 80004c8:	40021000 	.word	0x40021000
 80004cc:	f9ff808c 	.word	0xf9ff808c
 80004d0:	04c4b400 	.word	0x04c4b400

080004d4 <main>:
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80004d4:	4b4b      	ldr	r3, [pc, #300]	; (8000604 <main+0x130>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004d6:	4a4c      	ldr	r2, [pc, #304]	; (8000608 <main+0x134>)
 80004d8:	6e18      	ldr	r0, [r3, #96]	; 0x60
  reg_value  =  (reg_value                                   |
 80004da:	494c      	ldr	r1, [pc, #304]	; (800060c <main+0x138>)
{
 80004dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004de:	f040 0001 	orr.w	r0, r0, #1
 80004e2:	6618      	str	r0, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80004e4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80004e6:	b085      	sub	sp, #20
 80004e8:	f000 0001 	and.w	r0, r0, #1
 80004ec:	9003      	str	r0, [sp, #12]
  (void)tmpreg;
 80004ee:	9803      	ldr	r0, [sp, #12]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80004f0:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80004f2:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 80004f6:	6598      	str	r0, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80004f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004fe:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8000500:	9b02      	ldr	r3, [sp, #8]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000502:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000504:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
 8000508:	4003      	ands	r3, r0
  reg_value  =  (reg_value                                   |
 800050a:	4319      	orrs	r1, r3
  SCB->AIRCR =  reg_value;
 800050c:	60d1      	str	r1, [r2, #12]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800050e:	68d3      	ldr	r3, [r2, #12]
 8000510:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000514:	f1c3 0107 	rsb	r1, r3, #7
 8000518:	2904      	cmp	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800051a:	f103 0204 	add.w	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800051e:	bf28      	it	cs
 8000520:	2104      	movcs	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000522:	2a06      	cmp	r2, #6
 8000524:	bf88      	it	hi
 8000526:	1eda      	subhi	r2, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000528:	f04f 33ff 	mov.w	r3, #4294967295
 800052c:	fa03 f301 	lsl.w	r3, r3, r1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000530:	bf98      	it	ls
 8000532:	2200      	movls	r2, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000534:	43db      	mvns	r3, r3
 8000536:	4093      	lsls	r3, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000538:	011b      	lsls	r3, r3, #4
 800053a:	4a33      	ldr	r2, [pc, #204]	; (8000608 <main+0x134>)
 800053c:	b2db      	uxtb	r3, r3
 800053e:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
  SystemClock_Config();
 8000542:	f7ff ff61 	bl	8000408 <SystemClock_Config>
  MX_GPIO_Init();
 8000546:	f7ff fe51 	bl	80001ec <MX_GPIO_Init>
  MX_TIM1_Init();
 800054a:	f000 fa63 	bl	8000a14 <MX_TIM1_Init>
  MX_SPI2_Init();
 800054e:	f000 f9cd 	bl	80008ec <MX_SPI2_Init>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000552:	4b2f      	ldr	r3, [pc, #188]	; (8000610 <main+0x13c>)
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000554:	492f      	ldr	r1, [pc, #188]	; (8000614 <main+0x140>)
 8000556:	681a      	ldr	r2, [r3, #0]
 8000558:	f042 0201 	orr.w	r2, r2, #1
 800055c:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
  SET_BIT(TIMx->CCER, Channels);
 800055e:	6a1a      	ldr	r2, [r3, #32]
 8000560:	f042 0201 	orr.w	r2, r2, #1
 8000564:	621a      	str	r2, [r3, #32]
 8000566:	6a1a      	ldr	r2, [r3, #32]
 8000568:	f042 0210 	orr.w	r2, r2, #16
 800056c:	621a      	str	r2, [r3, #32]
 800056e:	6a1a      	ldr	r2, [r3, #32]
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000570:	2500      	movs	r5, #0
  SET_BIT(TIMx->CCER, Channels);
 8000572:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000576:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000578:	635d      	str	r5, [r3, #52]	; 0x34
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
  WRITE_REG(TIMx->CCR2, CompareValue);
 800057a:	639d      	str	r5, [r3, #56]	; 0x38
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
  WRITE_REG(TIMx->CCR3, CompareValue);
 800057c:	63dd      	str	r5, [r3, #60]	; 0x3c
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800057e:	695a      	ldr	r2, [r3, #20]
 8000580:	f042 0201 	orr.w	r2, r2, #1
 8000584:	615a      	str	r2, [r3, #20]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8000586:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000588:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800058c:	645a      	str	r2, [r3, #68]	; 0x44
 800058e:	680b      	ldr	r3, [r1, #0]
 8000590:	f043 0302 	orr.w	r3, r3, #2
 8000594:	600b      	str	r3, [r1, #0]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000596:	4b20      	ldr	r3, [pc, #128]	; (8000618 <main+0x144>)
 8000598:	2240      	movs	r2, #64	; 0x40
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	2280      	movs	r2, #128	; 0x80
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005a4:	601a      	str	r2, [r3, #0]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80005a6:	4f1d      	ldr	r7, [pc, #116]	; (800061c <main+0x148>)
 80005a8:	4e1d      	ldr	r6, [pc, #116]	; (8000620 <main+0x14c>)
 80005aa:	683b      	ldr	r3, [r7, #0]
	  for (volatile int i = 0; i < 100000; i++);
 80005ac:	4c1d      	ldr	r4, [pc, #116]	; (8000624 <main+0x150>)
 80005ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005b2:	603b      	str	r3, [r7, #0]
  motor_control_pwm_update_callback(0);
 80005b4:	4628      	mov	r0, r5
 80005b6:	f000 f8e3 	bl	8000780 <motor_control_pwm_update_callback>
  motor_control_reset_rotation();
 80005ba:	f000 f943 	bl	8000844 <motor_control_reset_rotation>
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableIT_TXE(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80005c4:	607b      	str	r3, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005cc:	607b      	str	r3, [r7, #4]
	  motor_control_pwm_update_callback(pwm);
 80005ce:	6830      	ldr	r0, [r6, #0]
 80005d0:	f000 f8d6 	bl	8000780 <motor_control_pwm_update_callback>
	  for (volatile int i = 0; i < 100000; i++);
 80005d4:	9500      	str	r5, [sp, #0]
 80005d6:	9b00      	ldr	r3, [sp, #0]
 80005d8:	42a3      	cmp	r3, r4
 80005da:	dc05      	bgt.n	80005e8 <main+0x114>
 80005dc:	9b00      	ldr	r3, [sp, #0]
 80005de:	3301      	adds	r3, #1
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	9b00      	ldr	r3, [sp, #0]
 80005e4:	42a3      	cmp	r3, r4
 80005e6:	ddf9      	ble.n	80005dc <main+0x108>
	  for (volatile int i = 0; i < 1000; i++);
 80005e8:	9501      	str	r5, [sp, #4]
 80005ea:	9b01      	ldr	r3, [sp, #4]
 80005ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005f0:	daed      	bge.n	80005ce <main+0xfa>
 80005f2:	9b01      	ldr	r3, [sp, #4]
 80005f4:	3301      	adds	r3, #1
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	9b01      	ldr	r3, [sp, #4]
 80005fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005fe:	dbf8      	blt.n	80005f2 <main+0x11e>
 8000600:	e7e5      	b.n	80005ce <main+0xfa>
 8000602:	bf00      	nop
 8000604:	40021000 	.word	0x40021000
 8000608:	e000ed00 	.word	0xe000ed00
 800060c:	05fa0300 	.word	0x05fa0300
 8000610:	40012c00 	.word	0x40012c00
 8000614:	e000e010 	.word	0xe000e010
 8000618:	e000e100 	.word	0xe000e100
 800061c:	40003800 	.word	0x40003800
 8000620:	20000020 	.word	0x20000020
 8000624:	0001869f 	.word	0x0001869f

08000628 <_motor_control_update_sector>:
	_motor_control_set_HZ(motor_phases[HZ_pin[drive_sector]]);
	_motor_control_set_ground(motor_phases[grounded_pin[drive_sector]]);
	_motor_control_set_pwm(motor_phases[pmw_pin[drive_sector]], pwm);
}

void _motor_control_update_sector(void){
 8000628:	b410      	push	{r4}
 800062a:	4c1b      	ldr	r4, [pc, #108]	; (8000698 <_motor_control_update_sector+0x70>)
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 800062c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000630:	6903      	ldr	r3, [r0, #16]
 8000632:	6902      	ldr	r2, [r0, #16]
 8000634:	6901      	ldr	r1, [r0, #16]
	int hall_value = (LL_GPIO_IsInputPinSet(HALL_U_GPIO_Port,HALL_U_Pin) << 2) |
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	f003 0304 	and.w	r3, r3, #4
 800063c:	f3c1 0180 	ubfx	r1, r1, #2, #1
			(LL_GPIO_IsInputPinSet(HALL_V_GPIO_Port,HALL_V_Pin) << 1) |
 8000640:	f002 0202 	and.w	r2, r2, #2
 8000644:	430b      	orrs	r3, r1
 8000646:	4313      	orrs	r3, r2
	if ((hall_value >= 1) && (hall_value <= 6)) { // hall value ok
 8000648:	3b01      	subs	r3, #1
 800064a:	2b05      	cmp	r3, #5
 800064c:	d8f0      	bhi.n	8000630 <_motor_control_update_sector+0x8>
		return hall_to_phase[hall_value - 1];
 800064e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
	static int old_sector = 0;
	int delta;

	//should not happend
	//! \todo ADD TIMEOUT !!!!!!
	while ((_Sector = _motor_control_get_hall()) == -1);
 8000652:	1c5a      	adds	r2, r3, #1
 8000654:	d0ec      	beq.n	8000630 <_motor_control_update_sector+0x8>

	delta = _Sector - old_sector;
 8000656:	4911      	ldr	r1, [pc, #68]	; (800069c <_motor_control_update_sector+0x74>)
 8000658:	4811      	ldr	r0, [pc, #68]	; (80006a0 <_motor_control_update_sector+0x78>)
 800065a:	680a      	ldr	r2, [r1, #0]
 800065c:	6003      	str	r3, [r0, #0]
 800065e:	1a9a      	subs	r2, r3, r2
	old_sector = _Sector;
 8000660:	600b      	str	r3, [r1, #0]

	if (delta <= -3){
 8000662:	1c93      	adds	r3, r2, #2
 8000664:	da07      	bge.n	8000676 <_motor_control_update_sector+0x4e>
		_Rotation += delta + 6;
 8000666:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <_motor_control_update_sector+0x7c>)
		_Rotation += delta - 6;
	}
	else{
		_Rotation += delta;
	}
};
 8000668:	f85d 4b04 	ldr.w	r4, [sp], #4
		_Rotation += delta + 6;
 800066c:	6819      	ldr	r1, [r3, #0]
 800066e:	3206      	adds	r2, #6
 8000670:	440a      	add	r2, r1
 8000672:	601a      	str	r2, [r3, #0]
};
 8000674:	4770      	bx	lr
	else if (delta >= 3){
 8000676:	2a02      	cmp	r2, #2
 8000678:	dd07      	ble.n	800068a <_motor_control_update_sector+0x62>
		_Rotation += delta - 6;
 800067a:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <_motor_control_update_sector+0x7c>)
};
 800067c:	f85d 4b04 	ldr.w	r4, [sp], #4
		_Rotation += delta - 6;
 8000680:	6819      	ldr	r1, [r3, #0]
 8000682:	3a06      	subs	r2, #6
 8000684:	440a      	add	r2, r1
 8000686:	601a      	str	r2, [r3, #0]
};
 8000688:	4770      	bx	lr
		_Rotation += delta;
 800068a:	4906      	ldr	r1, [pc, #24]	; (80006a4 <_motor_control_update_sector+0x7c>)
};
 800068c:	f85d 4b04 	ldr.w	r4, [sp], #4
		_Rotation += delta;
 8000690:	680b      	ldr	r3, [r1, #0]
 8000692:	441a      	add	r2, r3
 8000694:	600a      	str	r2, [r1, #0]
};
 8000696:	4770      	bx	lr
 8000698:	080014a4 	.word	0x080014a4
 800069c:	20000030 	.word	0x20000030
 80006a0:	2000002c 	.word	0x2000002c
 80006a4:	20000028 	.word	0x20000028

080006a8 <EXTI_IRQHandler>:

void EXTI_IRQHandler(void){
 80006a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 80006aa:	4b28      	ldr	r3, [pc, #160]	; (800074c <EXTI_IRQHandler+0xa4>)
 80006ac:	2204      	movs	r2, #4
 80006ae:	2001      	movs	r0, #1
 80006b0:	2102      	movs	r1, #2
 80006b2:	6158      	str	r0, [r3, #20]
 80006b4:	6159      	str	r1, [r3, #20]
 80006b6:	615a      	str	r2, [r3, #20]

	LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
	LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
	LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);

	_motor_control_update_sector();
 80006b8:	f7ff ffb6 	bl	8000628 <_motor_control_update_sector>
	_motor_control_update_pwm(_Sector, _Pwm_value);
 80006bc:	4b24      	ldr	r3, [pc, #144]	; (8000750 <EXTI_IRQHandler+0xa8>)
 80006be:	4a25      	ldr	r2, [pc, #148]	; (8000754 <EXTI_IRQHandler+0xac>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	6812      	ldr	r2, [r2, #0]
	if (pwm_value > 0){
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	dd2c      	ble.n	8000722 <EXTI_IRQHandler+0x7a>
		drive_sector = phase_order_direct_rotation[sector];
 80006c8:	4923      	ldr	r1, [pc, #140]	; (8000758 <EXTI_IRQHandler+0xb0>)
 80006ca:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
		pwm = (uint32_t)pwm_value;
 80006ce:	461c      	mov	r4, r3
	_motor_control_set_HZ(motor_phases[HZ_pin[drive_sector]]);
 80006d0:	4a22      	ldr	r2, [pc, #136]	; (800075c <EXTI_IRQHandler+0xb4>)
 80006d2:	4923      	ldr	r1, [pc, #140]	; (8000760 <EXTI_IRQHandler+0xb8>)
 80006d4:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
	_motor_control_set_ground(motor_phases[grounded_pin[drive_sector]]);
 80006d8:	4b22      	ldr	r3, [pc, #136]	; (8000764 <EXTI_IRQHandler+0xbc>)
	_motor_control_set_pwm(motor_phases[pmw_pin[drive_sector]], pwm);
 80006da:	4d23      	ldr	r5, [pc, #140]	; (8000768 <EXTI_IRQHandler+0xc0>)
 80006dc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80006e0:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 80006e4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80006e8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
	_motor_control_set_HZ(motor_phases[HZ_pin[drive_sector]]);
 80006ec:	f102 0608 	add.w	r6, r2, #8
 80006f0:	e896 10c0 	ldmia.w	r6, {r6, r7, ip}
	*(phase.pwm_compare_register) = 0;
 80006f4:	2500      	movs	r5, #0
 80006f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80006fa:	f8cc 5000 	str.w	r5, [ip]
  WRITE_REG(GPIOx->BRR, PinMask);
 80006fe:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8000702:	62b7      	str	r7, [r6, #40]	; 0x28
	_motor_control_set_ground(motor_phases[grounded_pin[drive_sector]]);
 8000704:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000708:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 800070c:	e9d3 6103 	ldrd	r6, r1, [r3, #12]
 8000710:	6898      	ldr	r0, [r3, #8]
	_motor_control_set_pwm(motor_phases[pmw_pin[drive_sector]], pwm);
 8000712:	6893      	ldr	r3, [r2, #8]
	*(phase.pwm_compare_register) = 0;
 8000714:	600d      	str	r5, [r1, #0]
	_motor_control_set_pwm(motor_phases[pmw_pin[drive_sector]], pwm);
 8000716:	6911      	ldr	r1, [r2, #16]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000718:	6186      	str	r6, [r0, #24]
 800071a:	68d2      	ldr	r2, [r2, #12]
	*(phase.pwm_compare_register) = pwm_value;
 800071c:	600c      	str	r4, [r1, #0]
 800071e:	619a      	str	r2, [r3, #24]
}
 8000720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if (pwm_value < 0){
 8000722:	d004      	beq.n	800072e <EXTI_IRQHandler+0x86>
		drive_sector = phase_order_indirect_rotation[sector];
 8000724:	4911      	ldr	r1, [pc, #68]	; (800076c <EXTI_IRQHandler+0xc4>)
		pwm = (uint32_t)(- pwm_value);
 8000726:	425c      	negs	r4, r3
		drive_sector = phase_order_indirect_rotation[sector];
 8000728:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
		pwm = (uint32_t)(- pwm_value);
 800072c:	e7d0      	b.n	80006d0 <EXTI_IRQHandler+0x28>
	*(phase.pwm_compare_register) = 0;
 800072e:	4910      	ldr	r1, [pc, #64]	; (8000770 <EXTI_IRQHandler+0xc8>)
  WRITE_REG(GPIOx->BRR, PinMask);
 8000730:	4a10      	ldr	r2, [pc, #64]	; (8000774 <EXTI_IRQHandler+0xcc>)
 8000732:	600b      	str	r3, [r1, #0]
 8000734:	4d10      	ldr	r5, [pc, #64]	; (8000778 <EXTI_IRQHandler+0xd0>)
 8000736:	4811      	ldr	r0, [pc, #68]	; (800077c <EXTI_IRQHandler+0xd4>)
 8000738:	2140      	movs	r1, #64	; 0x40
 800073a:	6291      	str	r1, [r2, #40]	; 0x28
 800073c:	2480      	movs	r4, #128	; 0x80
 800073e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000742:	602b      	str	r3, [r5, #0]
 8000744:	6294      	str	r4, [r2, #40]	; 0x28
 8000746:	6003      	str	r3, [r0, #0]
 8000748:	6291      	str	r1, [r2, #40]	; 0x28
}
 800074a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800074c:	40010400 	.word	0x40010400
 8000750:	20000024 	.word	0x20000024
 8000754:	2000002c 	.word	0x2000002c
 8000758:	080014f8 	.word	0x080014f8
 800075c:	08001474 	.word	0x08001474
 8000760:	080014bc 	.word	0x080014bc
 8000764:	0800148c 	.word	0x0800148c
 8000768:	08001528 	.word	0x08001528
 800076c:	08001510 	.word	0x08001510
 8000770:	40012c34 	.word	0x40012c34
 8000774:	48000800 	.word	0x48000800
 8000778:	40012c38 	.word	0x40012c38
 800077c:	40012c3c 	.word	0x40012c3c

08000780 <motor_control_pwm_update_callback>:

void motor_control_pwm_update_callback(int pwm){
	_Pwm_value = pwm;
 8000780:	4a24      	ldr	r2, [pc, #144]	; (8000814 <motor_control_pwm_update_callback+0x94>)
	_motor_control_update_pwm(_Sector, _Pwm_value);
 8000782:	4b25      	ldr	r3, [pc, #148]	; (8000818 <motor_control_pwm_update_callback+0x98>)
	if (pwm_value > 0){
 8000784:	2800      	cmp	r0, #0
void motor_control_pwm_update_callback(int pwm){
 8000786:	b4f0      	push	{r4, r5, r6, r7}
	_motor_control_update_pwm(_Sector, _Pwm_value);
 8000788:	681b      	ldr	r3, [r3, #0]
	_Pwm_value = pwm;
 800078a:	6010      	str	r0, [r2, #0]
	if (pwm_value > 0){
 800078c:	dd2c      	ble.n	80007e8 <motor_control_pwm_update_callback+0x68>
		drive_sector = phase_order_direct_rotation[sector];
 800078e:	4a23      	ldr	r2, [pc, #140]	; (800081c <motor_control_pwm_update_callback+0x9c>)
 8000790:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
	_motor_control_set_HZ(motor_phases[HZ_pin[drive_sector]]);
 8000794:	4a22      	ldr	r2, [pc, #136]	; (8000820 <motor_control_pwm_update_callback+0xa0>)
 8000796:	4923      	ldr	r1, [pc, #140]	; (8000824 <motor_control_pwm_update_callback+0xa4>)
 8000798:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
	_motor_control_set_ground(motor_phases[grounded_pin[drive_sector]]);
 800079c:	4b22      	ldr	r3, [pc, #136]	; (8000828 <motor_control_pwm_update_callback+0xa8>)
	_motor_control_set_pwm(motor_phases[pmw_pin[drive_sector]], pwm);
 800079e:	4d23      	ldr	r5, [pc, #140]	; (800082c <motor_control_pwm_update_callback+0xac>)
 80007a0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80007a4:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 80007a8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80007ac:	eb01 0282 	add.w	r2, r1, r2, lsl #2
	_motor_control_set_HZ(motor_phases[HZ_pin[drive_sector]]);
 80007b0:	f102 0608 	add.w	r6, r2, #8
 80007b4:	e896 10c0 	ldmia.w	r6, {r6, r7, ip}
	*(phase.pwm_compare_register) = 0;
 80007b8:	2500      	movs	r5, #0
 80007ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80007be:	f8cc 5000 	str.w	r5, [ip]
 80007c2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80007c6:	62b7      	str	r7, [r6, #40]	; 0x28
	_motor_control_set_ground(motor_phases[grounded_pin[drive_sector]]);
 80007c8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80007cc:	eb01 0284 	add.w	r2, r1, r4, lsl #2
 80007d0:	e9d3 6103 	ldrd	r6, r1, [r3, #12]
 80007d4:	689c      	ldr	r4, [r3, #8]
	_motor_control_set_pwm(motor_phases[pmw_pin[drive_sector]], pwm);
 80007d6:	6893      	ldr	r3, [r2, #8]
	*(phase.pwm_compare_register) = 0;
 80007d8:	600d      	str	r5, [r1, #0]
	_motor_control_set_pwm(motor_phases[pmw_pin[drive_sector]], pwm);
 80007da:	6911      	ldr	r1, [r2, #16]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80007dc:	61a6      	str	r6, [r4, #24]
 80007de:	68d2      	ldr	r2, [r2, #12]
	*(phase.pwm_compare_register) = pwm_value;
 80007e0:	6008      	str	r0, [r1, #0]
}
 80007e2:	bcf0      	pop	{r4, r5, r6, r7}
 80007e4:	619a      	str	r2, [r3, #24]
 80007e6:	4770      	bx	lr
	else if (pwm_value < 0){
 80007e8:	d004      	beq.n	80007f4 <motor_control_pwm_update_callback+0x74>
		drive_sector = phase_order_indirect_rotation[sector];
 80007ea:	4a11      	ldr	r2, [pc, #68]	; (8000830 <motor_control_pwm_update_callback+0xb0>)
		pwm = (uint32_t)(- pwm_value);
 80007ec:	4240      	negs	r0, r0
		drive_sector = phase_order_indirect_rotation[sector];
 80007ee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
		pwm = (uint32_t)(- pwm_value);
 80007f2:	e7cf      	b.n	8000794 <motor_control_pwm_update_callback+0x14>
	*(phase.pwm_compare_register) = 0;
 80007f4:	4a0f      	ldr	r2, [pc, #60]	; (8000834 <motor_control_pwm_update_callback+0xb4>)
  WRITE_REG(GPIOx->BRR, PinMask);
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <motor_control_pwm_update_callback+0xb8>)
 80007f8:	6010      	str	r0, [r2, #0]
 80007fa:	4d10      	ldr	r5, [pc, #64]	; (800083c <motor_control_pwm_update_callback+0xbc>)
 80007fc:	4910      	ldr	r1, [pc, #64]	; (8000840 <motor_control_pwm_update_callback+0xc0>)
 80007fe:	2240      	movs	r2, #64	; 0x40
 8000800:	629a      	str	r2, [r3, #40]	; 0x28
 8000802:	2480      	movs	r4, #128	; 0x80
 8000804:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000808:	6028      	str	r0, [r5, #0]
 800080a:	629c      	str	r4, [r3, #40]	; 0x28
 800080c:	6008      	str	r0, [r1, #0]
}
 800080e:	bcf0      	pop	{r4, r5, r6, r7}
 8000810:	629a      	str	r2, [r3, #40]	; 0x28
 8000812:	4770      	bx	lr
 8000814:	20000024 	.word	0x20000024
 8000818:	2000002c 	.word	0x2000002c
 800081c:	080014f8 	.word	0x080014f8
 8000820:	08001474 	.word	0x08001474
 8000824:	080014bc 	.word	0x080014bc
 8000828:	0800148c 	.word	0x0800148c
 800082c:	08001528 	.word	0x08001528
 8000830:	08001510 	.word	0x08001510
 8000834:	40012c34 	.word	0x40012c34
 8000838:	48000800 	.word	0x48000800
 800083c:	40012c38 	.word	0x40012c38
 8000840:	40012c3c 	.word	0x40012c3c

08000844 <motor_control_reset_rotation>:

void motor_control_reset_rotation(void){
	_Rotation = 0;
 8000844:	4b01      	ldr	r3, [pc, #4]	; (800084c <motor_control_reset_rotation+0x8>)
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
}
 800084a:	4770      	bx	lr
 800084c:	20000028 	.word	0x20000028

08000850 <SysTick_IRQHandler>:
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000850:	490a      	ldr	r1, [pc, #40]	; (800087c <SysTick_IRQHandler+0x2c>)
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <SysTick_IRQHandler+0x30>)
 8000854:	f44f 7000 	mov.w	r0, #512	; 0x200
#include "main.h"

volatile float speed = 0.0f;
static float old_rotation = 0.0f;

void SysTick_IRQHandler(void){
 8000858:	b410      	push	{r4}
 800085a:	6188      	str	r0, [r1, #24]
 800085c:	685a      	ldr	r2, [r3, #4]
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
  *spidr = TxData;
 800085e:	f64f 74ff 	movw	r4, #65535	; 0xffff
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 8000862:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000866:	605a      	str	r2, [r3, #4]
  *spidr = TxData;
 8000868:	819c      	strh	r4, [r3, #12]
  SET_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 800086a:	685a      	ldr	r2, [r3, #4]



	//debug
	LL_GPIO_ResetOutputPin(CS2_GPIO_Port, CS2_Pin);
}
 800086c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000870:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000874:	605a      	str	r2, [r3, #4]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000876:	6288      	str	r0, [r1, #40]	; 0x28
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	48000800 	.word	0x48000800
 8000880:	40003800 	.word	0x40003800

08000884 <SPI2_IRQHandler>:
  return ((READ_BIT(SPIx->CR2, SPI_CR2_TXEIE) == (SPI_CR2_TXEIE)) ? 1UL : 0UL);
 8000884:	4b15      	ldr	r3, [pc, #84]	; (80008dc <SPI2_IRQHandler+0x58>)
 8000886:	685a      	ldr	r2, [r3, #4]
 8000888:	0612      	lsls	r2, r2, #24
 800088a:	d518      	bpl.n	80008be <SPI2_IRQHandler+0x3a>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800088c:	689a      	ldr	r2, [r3, #8]
 800088e:	0790      	lsls	r0, r2, #30
 8000890:	d515      	bpl.n	80008be <SPI2_IRQHandler+0x3a>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000892:	4913      	ldr	r1, [pc, #76]	; (80008e0 <SPI2_IRQHandler+0x5c>)
 8000894:	f44f 7000 	mov.w	r0, #512	; 0x200
	old_rotation = new_rotation;
*/
}


void SPI2_IRQHandler(void){
 8000898:	b430      	push	{r4, r5}
 800089a:	6188      	str	r0, [r1, #24]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 800089c:	685a      	ldr	r2, [r3, #4]
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800089e:	4c11      	ldr	r4, [pc, #68]	; (80008e4 <SPI2_IRQHandler+0x60>)
 80008a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80008a4:	605a      	str	r2, [r3, #4]
  *spidr = TxData;
 80008a6:	2500      	movs	r5, #0
 80008a8:	2210      	movs	r2, #16
 80008aa:	819d      	strh	r5, [r3, #12]
 80008ac:	f8c4 2184 	str.w	r2, [r4, #388]	; 0x184
  SET_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 80008b0:	685a      	ldr	r2, [r3, #4]
 80008b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80008b6:	605a      	str	r2, [r3, #4]
	if (LL_SPI_IsEnabledIT_RXNE(SPI2) && LL_SPI_IsActiveFlag_RXNE(SPI2)){
		data = LL_SPI_ReceiveData16(SPI2) & 0x3fff;

	}

}
 80008b8:	bc30      	pop	{r4, r5}
  WRITE_REG(GPIOx->BRR, PinMask);
 80008ba:	6288      	str	r0, [r1, #40]	; 0x28
 80008bc:	4770      	bx	lr
  return ((READ_BIT(SPIx->CR2, SPI_CR2_RXNEIE) == (SPI_CR2_RXNEIE)) ? 1UL : 0UL);
 80008be:	4b07      	ldr	r3, [pc, #28]	; (80008dc <SPI2_IRQHandler+0x58>)
 80008c0:	685a      	ldr	r2, [r3, #4]
 80008c2:	0651      	lsls	r1, r2, #25
 80008c4:	d508      	bpl.n	80008d8 <SPI2_IRQHandler+0x54>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80008c6:	689a      	ldr	r2, [r3, #8]
	if (LL_SPI_IsEnabledIT_RXNE(SPI2) && LL_SPI_IsActiveFlag_RXNE(SPI2)){
 80008c8:	07d2      	lsls	r2, r2, #31
 80008ca:	d505      	bpl.n	80008d8 <SPI2_IRQHandler+0x54>
  return (uint16_t)(READ_REG(SPIx->DR));
 80008cc:	68db      	ldr	r3, [r3, #12]
		data = LL_SPI_ReceiveData16(SPI2) & 0x3fff;
 80008ce:	4a06      	ldr	r2, [pc, #24]	; (80008e8 <SPI2_IRQHandler+0x64>)
 80008d0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80008d4:	8013      	strh	r3, [r2, #0]
 80008d6:	4770      	bx	lr
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	40003800 	.word	0x40003800
 80008e0:	48000800 	.word	0x48000800
 80008e4:	e000e100 	.word	0xe000e100
 80008e8:	20000034 	.word	0x20000034

080008ec <MX_SPI2_Init>:

/* USER CODE END 0 */

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80008ec:	b510      	push	{r4, lr}
 80008ee:	b092      	sub	sp, #72	; 0x48

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80008f0:	a808      	add	r0, sp, #32
 80008f2:	2228      	movs	r2, #40	; 0x28
 80008f4:	2100      	movs	r1, #0
 80008f6:	f000 fda9 	bl	800144c <memset>
  SET_BIT(RCC->APB1ENR1, Periphs);
 80008fa:	4b34      	ldr	r3, [pc, #208]	; (80009cc <MX_SPI2_Init+0xe0>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fc:	4834      	ldr	r0, [pc, #208]	; (80009d0 <MX_SPI2_Init+0xe4>)
 80008fe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000900:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000904:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000906:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000908:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800090c:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800090e:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000910:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000912:	f042 0202 	orr.w	r2, r2, #2
 8000916:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	f003 0302 	and.w	r3, r3, #2
 800091e:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8000920:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 8000924:	2302      	movs	r3, #2
 8000926:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800092a:	2203      	movs	r2, #3
 800092c:	2300      	movs	r3, #0
 800092e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000932:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8000934:	2200      	movs	r2, #0
 8000936:	2305      	movs	r3, #5
 8000938:	e9cd 2306 	strd	r2, r3, [sp, #24]
  (void)tmpreg;
 800093c:	9c00      	ldr	r4, [sp, #0]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093e:	f000 fa1f 	bl	8000d80 <LL_GPIO_Init>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000942:	4b24      	ldr	r3, [pc, #144]	; (80009d4 <MX_SPI2_Init+0xe8>)
 8000944:	68da      	ldr	r2, [r3, #12]
 8000946:	f3c2 2202 	ubfx	r2, r2, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800094a:	f1c2 0107 	rsb	r1, r2, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800094e:	1d13      	adds	r3, r2, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000950:	2904      	cmp	r1, #4
 8000952:	bf28      	it	cs
 8000954:	2104      	movcs	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000956:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000958:	f04f 33ff 	mov.w	r3, #4294967295
 800095c:	fa03 f301 	lsl.w	r3, r3, r1
 8000960:	ea6f 0303 	mvn.w	r3, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000964:	bf8c      	ite	hi
 8000966:	3a03      	subhi	r2, #3
 8000968:	2200      	movls	r2, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000970:	011b      	lsls	r3, r3, #4
 8000972:	4a19      	ldr	r2, [pc, #100]	; (80009d8 <MX_SPI2_Init+0xec>)
 8000974:	b2db      	uxtb	r3, r3
 8000976:	f882 3324 	strb.w	r3, [r2, #804]	; 0x324
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800097a:	2310      	movs	r3, #16
 800097c:	6053      	str	r3, [r2, #4]
  NVIC_EnableIRQ(SPI2_IRQn);

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800097e:	2200      	movs	r2, #0
 8000980:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000984:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8000988:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800098c:	2300      	movs	r3, #0
  SPI_InitStruct.NSS = LL_SPI_NSS_HARD_OUTPUT;
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
  SPI_InitStruct.CRCPoly = 7;
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 800098e:	4c13      	ldr	r4, [pc, #76]	; (80009dc <MX_SPI2_Init+0xf0>)
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000990:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8000994:	2201      	movs	r2, #1
 8000996:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800099a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800099e:	2220      	movs	r2, #32
 80009a0:	2300      	movs	r3, #0
 80009a2:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 80009a6:	a908      	add	r1, sp, #32
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80009a8:	2200      	movs	r2, #0
 80009aa:	2307      	movs	r3, #7
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 80009ac:	4620      	mov	r0, r4
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80009ae:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 80009b2:	f000 faa3 	bl	8000efc <LL_SPI_Init>
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80009b6:	6863      	ldr	r3, [r4, #4]
 80009b8:	f023 0310 	bic.w	r3, r3, #16
 80009bc:	6063      	str	r3, [r4, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 80009be:	6863      	ldr	r3, [r4, #4]
 80009c0:	f043 0308 	orr.w	r3, r3, #8
 80009c4:	6063      	str	r3, [r4, #4]
  LL_SPI_EnableNSSPulseMgt(SPI2);
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009c6:	b012      	add	sp, #72	; 0x48
 80009c8:	bd10      	pop	{r4, pc}
 80009ca:	bf00      	nop
 80009cc:	40021000 	.word	0x40021000
 80009d0:	48000400 	.word	0x48000400
 80009d4:	e000ed00 	.word	0xe000ed00
 80009d8:	e000e100 	.word	0xe000e100
 80009dc:	40003800 	.word	0x40003800

080009e0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <NMI_Handler>
 80009e2:	bf00      	nop

080009e4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <HardFault_Handler>
 80009e6:	bf00      	nop

080009e8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <MemManage_Handler>
 80009ea:	bf00      	nop

080009ec <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <BusFault_Handler>
 80009ee:	bf00      	nop

080009f0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <UsageFault_Handler>
 80009f2:	bf00      	nop

080009f4 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <DebugMon_Handler>:
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <PendSV_Handler>:
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a00:	4a03      	ldr	r2, [pc, #12]	; (8000a10 <SystemInit+0x10>)
 8000a02:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000a06:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a0a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a0e:	4770      	bx	lr
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000a18:	2500      	movs	r5, #0
{
 8000a1a:	b0a0      	sub	sp, #128	; 0x80
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000a1c:	4629      	mov	r1, r5
 8000a1e:	a80e      	add	r0, sp, #56	; 0x38
 8000a20:	2220      	movs	r2, #32
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000a22:	f8ad 500e 	strh.w	r5, [sp, #14]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000a26:	f000 fd11 	bl	800144c <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8000a2a:	4629      	mov	r1, r5
 8000a2c:	a816      	add	r0, sp, #88	; 0x58
 8000a2e:	2228      	movs	r2, #40	; 0x28
 8000a30:	f000 fd0c 	bl	800144c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8000a38:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
 8000a3c:	e9cd 550c 	strd	r5, r5, [sp, #48]	; 0x30
  SET_BIT(RCC->APB2ENR, Periphs);
 8000a40:	f8df a160 	ldr.w	sl, [pc, #352]	; 8000ba4 <MX_TIM1_Init+0x190>
  TIM_InitStruct.Prescaler = 0;
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
  TIM_InitStruct.Autoreload = PWM_FREQUENCY;
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
  TIM_InitStruct.RepetitionCounter = 0;
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8000a44:	4c56      	ldr	r4, [pc, #344]	; (8000ba0 <MX_TIM1_Init+0x18c>)
 8000a46:	f8da 3060 	ldr.w	r3, [sl, #96]	; 0x60
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000a4a:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8000ba8 <MX_TIM1_Init+0x194>
 8000a4e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a52:	f8ca 3060 	str.w	r3, [sl, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000a56:	f8da 3060 	ldr.w	r3, [sl, #96]	; 0x60
  TIM_InitStruct.Prescaler = 0;
 8000a5a:	f8ad 500c 	strh.w	r5, [sp, #12]
 8000a5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a62:	9302      	str	r3, [sp, #8]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8000a64:	a903      	add	r1, sp, #12
  TIM_InitStruct.Autoreload = PWM_FREQUENCY;
 8000a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8000a6a:	4620      	mov	r0, r4
  TIM_InitStruct.RepetitionCounter = 0;
 8000a6c:	e9cd 5506 	strd	r5, r5, [sp, #24]
  (void)tmpreg;
 8000a70:	9a02      	ldr	r2, [sp, #8]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000a72:	9504      	str	r5, [sp, #16]
  TIM_InitStruct.Autoreload = PWM_FREQUENCY;
 8000a74:	9305      	str	r3, [sp, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8000a76:	f000 fa79 	bl	8000f6c <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000a7a:	6823      	ldr	r3, [r4, #0]
 8000a7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000a80:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000a82:	68a3      	ldr	r3, [r4, #8]
 8000a84:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8000a88:	f023 0307 	bic.w	r3, r3, #7
 8000a8c:	60a3      	str	r3, [r4, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000a8e:	69a3      	ldr	r3, [r4, #24]
  LL_TIM_DisableARRPreload(TIM1);
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000a90:	2660      	movs	r6, #96	; 0x60
 8000a92:	f043 0308 	orr.w	r3, r3, #8
 8000a96:	2700      	movs	r7, #0
 8000a98:	61a3      	str	r3, [r4, #24]
  TIM_OC_InitStruct.CompareValue = 0;
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000a9a:	aa0e      	add	r2, sp, #56	; 0x38
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000a9c:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000aa0:	4620      	mov	r0, r4
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000aa2:	2600      	movs	r6, #0
 8000aa4:	2700      	movs	r7, #0
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000aa6:	2101      	movs	r1, #1
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000aa8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8000aac:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8000ab0:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000ab4:	f000 faae 	bl	8001014 <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000ab8:	69a3      	ldr	r3, [r4, #24]
 8000aba:	f023 0304 	bic.w	r3, r3, #4
 8000abe:	61a3      	str	r3, [r4, #24]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000ac0:	69a3      	ldr	r3, [r4, #24]
 8000ac2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ac6:	61a3      	str	r3, [r4, #24]
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH2);
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8000ac8:	aa0e      	add	r2, sp, #56	; 0x38
 8000aca:	4620      	mov	r0, r4
 8000acc:	2110      	movs	r1, #16
 8000ace:	f000 faa1 	bl	8001014 <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000ad2:	69a3      	ldr	r3, [r4, #24]
 8000ad4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000ad8:	61a3      	str	r3, [r4, #24]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000ada:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8000ade:	f043 0308 	orr.w	r3, r3, #8
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8000ae2:	aa0e      	add	r2, sp, #56	; 0x38
 8000ae4:	f8c8 3004 	str.w	r3, [r8, #4]
 8000ae8:	4620      	mov	r0, r4
 8000aea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aee:	f000 fa91 	bl	8001014 <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000af2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8000af6:	f023 0304 	bic.w	r3, r3, #4
 8000afa:	f8c8 3004 	str.w	r3, [r8, #4]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_OCCS, OCRefClearInputSource);
 8000afe:	68a3      	ldr	r3, [r4, #8]
 8000b00:	f023 0308 	bic.w	r3, r3, #8
 8000b04:	60a3      	str	r3, [r4, #8]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_ECE);
 8000b06:	68a3      	ldr	r3, [r4, #8]
 8000b08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000b0c:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_ETP | TIM_SMCR_ETPS | TIM_SMCR_ETF, ETRPolarity | ETRPrescaler | ETRFilter);
 8000b0e:	68a3      	ldr	r3, [r4, #8]
 8000b10:	f423 433f 	bic.w	r3, r3, #48896	; 0xbf00
 8000b14:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000b16:	6863      	ldr	r3, [r4, #4]
 8000b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b1c:	6063      	str	r3, [r4, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8000b1e:	6863      	ldr	r3, [r4, #4]
 8000b20:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000b24:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000b26:	68a3      	ldr	r3, [r4, #8]
 8000b28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000b2c:	60a3      	str	r3, [r4, #8]
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
  TIM_BDTRInitStruct.Break2State = LL_TIM_BREAK2_DISABLE;
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
  TIM_BDTRInitStruct.Break2Filter = LL_TIM_BREAK2_FILTER_FDIV1;
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8000b2e:	a916      	add	r1, sp, #88	; 0x58
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8000b30:	2200      	movs	r2, #0
 8000b32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8000b36:	4620      	mov	r0, r4
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8000b38:	f44f 5800 	mov.w	r8, #8192	; 0x2000
 8000b3c:	f04f 0900 	mov.w	r9, #0
 8000b40:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8000b44:	9518      	str	r5, [sp, #96]	; 0x60
  TIM_BDTRInitStruct.DeadTime = 0;
 8000b46:	f88d 5064 	strb.w	r5, [sp, #100]	; 0x64
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8000b4a:	f8ad 5066 	strh.w	r5, [sp, #102]	; 0x66
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8000b4e:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8000b52:	e9cd 671e 	strd	r6, r7, [sp, #120]	; 0x78
 8000b56:	e9cd 891a 	strd	r8, r9, [sp, #104]	; 0x68
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8000b5a:	f000 fc03 	bl	8001364 <LL_TIM_BDTR_Init>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b5e:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 8000b62:	f043 0301 	orr.w	r3, r3, #1
 8000b66:	f8ca 304c 	str.w	r3, [sl, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b6a:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	9301      	str	r3, [sp, #4]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
  GPIO_InitStruct.Pin = PWM_U_Pin|PWM_V_Pin|PWM_W_Pin;
 8000b74:	2200      	movs	r2, #0
 8000b76:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b78:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = PWM_U_Pin|PWM_V_Pin|PWM_W_Pin;
 8000b7a:	f44f 64e0 	mov.w	r4, #1792	; 0x700
 8000b7e:	2502      	movs	r5, #2
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = PWM_U_Pin|PWM_V_Pin|PWM_W_Pin;
 8000b84:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 8000b88:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8000b8c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  (void)tmpreg;
 8000b90:	f8dd c004 	ldr.w	ip, [sp, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b94:	f000 f8f4 	bl	8000d80 <LL_GPIO_Init>

}
 8000b98:	b020      	add	sp, #128	; 0x80
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40012c00 	.word	0x40012c00
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	40012c18 	.word	0x40012c18

08000bac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bb0:	f7ff ff26 	bl	8000a00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb4:	480c      	ldr	r0, [pc, #48]	; (8000be8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bb6:	490d      	ldr	r1, [pc, #52]	; (8000bec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bb8:	4a0d      	ldr	r2, [pc, #52]	; (8000bf0 <LoopForever+0xe>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bbc:	e002      	b.n	8000bc4 <LoopCopyDataInit>

08000bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc2:	3304      	adds	r3, #4

08000bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc8:	d3f9      	bcc.n	8000bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bca:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bcc:	4c0a      	ldr	r4, [pc, #40]	; (8000bf8 <LoopForever+0x16>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd0:	e001      	b.n	8000bd6 <LoopFillZerobss>

08000bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd4:	3204      	adds	r2, #4

08000bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd8:	d3fb      	bcc.n	8000bd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bda:	f000 fc13 	bl	8001404 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bde:	f7ff fc79 	bl	80004d4 <main>

08000be2 <LoopForever>:

LoopForever:
    b LoopForever
 8000be2:	e7fe      	b.n	8000be2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000be4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bec:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000bf0:	08001548 	.word	0x08001548
  ldr r2, =_sbss
 8000bf4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000bf8:	20000038 	.word	0x20000038

08000bfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bfc:	e7fe      	b.n	8000bfc <ADC1_2_IRQHandler>
	...

08000c00 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8000c00:	b470      	push	{r4, r5, r6}
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8000c02:	7a03      	ldrb	r3, [r0, #8]
 8000c04:	b1c3      	cbz	r3, 8000c38 <LL_EXTI_Init+0x38>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8000c06:	6803      	ldr	r3, [r0, #0]
 8000c08:	bb63      	cbnz	r3, 8000c64 <LL_EXTI_Init+0x64>
            break;
          default:
            status |= 0x02u;
            break;
        }
      }
 8000c0a:	2404      	movs	r4, #4
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8000c0c:	6842      	ldr	r2, [r0, #4]
 8000c0e:	b332      	cbz	r2, 8000c5e <LL_EXTI_Init+0x5e>
    {
      switch (EXTI_InitStruct->Mode)
 8000c10:	7a41      	ldrb	r1, [r0, #9]
 8000c12:	2901      	cmp	r1, #1
 8000c14:	d069      	beq.n	8000cea <LL_EXTI_Init+0xea>
 8000c16:	2902      	cmp	r1, #2
 8000c18:	d047      	beq.n	8000caa <LL_EXTI_Init+0xaa>
 8000c1a:	2900      	cmp	r1, #0
 8000c1c:	d039      	beq.n	8000c92 <LL_EXTI_Init+0x92>
 8000c1e:	4623      	mov	r3, r4
          break;
        default:
          status |= 0x04u;
          break;
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000c20:	7a81      	ldrb	r1, [r0, #10]
 8000c22:	b1e1      	cbz	r1, 8000c5e <LL_EXTI_Init+0x5e>
      {
        switch (EXTI_InitStruct->Trigger)
 8000c24:	2902      	cmp	r1, #2
 8000c26:	f000 8091 	beq.w	8000d4c <LL_EXTI_Init+0x14c>
 8000c2a:	2903      	cmp	r1, #3
 8000c2c:	f000 8086 	beq.w	8000d3c <LL_EXTI_Init+0x13c>
 8000c30:	2901      	cmp	r1, #1
 8000c32:	d07a      	beq.n	8000d2a <LL_EXTI_Init+0x12a>
 8000c34:	2301      	movs	r3, #1
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
  }

  return status;
 8000c36:	e012      	b.n	8000c5e <LL_EXTI_Init+0x5e>
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8000c38:	4a50      	ldr	r2, [pc, #320]	; (8000d7c <LL_EXTI_Init+0x17c>)
 8000c3a:	6805      	ldr	r5, [r0, #0]
 8000c3c:	6814      	ldr	r4, [r2, #0]
 8000c3e:	ea24 0405 	bic.w	r4, r4, r5
 8000c42:	6014      	str	r4, [r2, #0]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8000c44:	6851      	ldr	r1, [r2, #4]
 8000c46:	ea21 0105 	bic.w	r1, r1, r5
 8000c4a:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8000c4c:	6844      	ldr	r4, [r0, #4]
 8000c4e:	6a10      	ldr	r0, [r2, #32]
 8000c50:	ea20 0004 	bic.w	r0, r0, r4
 8000c54:	6210      	str	r0, [r2, #32]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8000c56:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000c58:	ea21 0104 	bic.w	r1, r1, r4
 8000c5c:	6251      	str	r1, [r2, #36]	; 0x24
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	bc70      	pop	{r4, r5, r6}
 8000c62:	4770      	bx	lr
      switch (EXTI_InitStruct->Mode)
 8000c64:	7a42      	ldrb	r2, [r0, #9]
 8000c66:	2a01      	cmp	r2, #1
 8000c68:	d048      	beq.n	8000cfc <LL_EXTI_Init+0xfc>
 8000c6a:	2a02      	cmp	r2, #2
 8000c6c:	d025      	beq.n	8000cba <LL_EXTI_Init+0xba>
 8000c6e:	2a00      	cmp	r2, #0
 8000c70:	d02e      	beq.n	8000cd0 <LL_EXTI_Init+0xd0>
 8000c72:	2607      	movs	r6, #7
 8000c74:	2405      	movs	r4, #5
 8000c76:	2203      	movs	r2, #3
 8000c78:	2501      	movs	r5, #1
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000c7a:	7a81      	ldrb	r1, [r0, #10]
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	d052      	beq.n	8000d26 <LL_EXTI_Init+0x126>
        switch (EXTI_InitStruct->Trigger)
 8000c80:	2902      	cmp	r1, #2
 8000c82:	d048      	beq.n	8000d16 <LL_EXTI_Init+0x116>
 8000c84:	2903      	cmp	r1, #3
 8000c86:	d074      	beq.n	8000d72 <LL_EXTI_Init+0x172>
 8000c88:	2901      	cmp	r1, #1
 8000c8a:	d068      	beq.n	8000d5e <LL_EXTI_Init+0x15e>
 8000c8c:	4634      	mov	r4, r6
 8000c8e:	4613      	mov	r3, r2
 8000c90:	e7bc      	b.n	8000c0c <LL_EXTI_Init+0xc>
 8000c92:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8000c96:	f501 3182 	add.w	r1, r1, #66560	; 0x10400
 8000c9a:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8000c9c:	ea24 0402 	bic.w	r4, r4, r2
 8000ca0:	624c      	str	r4, [r1, #36]	; 0x24
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000ca2:	6a0c      	ldr	r4, [r1, #32]
 8000ca4:	4314      	orrs	r4, r2
 8000ca6:	620c      	str	r4, [r1, #32]
}
 8000ca8:	e7ba      	b.n	8000c20 <LL_EXTI_Init+0x20>
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000caa:	4934      	ldr	r1, [pc, #208]	; (8000d7c <LL_EXTI_Init+0x17c>)
 8000cac:	6a0c      	ldr	r4, [r1, #32]
 8000cae:	4314      	orrs	r4, r2
 8000cb0:	620c      	str	r4, [r1, #32]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8000cb2:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8000cb4:	4314      	orrs	r4, r2
 8000cb6:	624c      	str	r4, [r1, #36]	; 0x24
}
 8000cb8:	e7b2      	b.n	8000c20 <LL_EXTI_Init+0x20>
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000cba:	4930      	ldr	r1, [pc, #192]	; (8000d7c <LL_EXTI_Init+0x17c>)
 8000cbc:	680c      	ldr	r4, [r1, #0]
 8000cbe:	431c      	orrs	r4, r3
 8000cc0:	600c      	str	r4, [r1, #0]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8000cc2:	684c      	ldr	r4, [r1, #4]
 8000cc4:	431c      	orrs	r4, r3
 8000cc6:	604c      	str	r4, [r1, #4]
}
 8000cc8:	2606      	movs	r6, #6
 8000cca:	2404      	movs	r4, #4
  uint32_t status = 0x00u;
 8000ccc:	2500      	movs	r5, #0
 8000cce:	e7d4      	b.n	8000c7a <LL_EXTI_Init+0x7a>
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8000cd0:	492a      	ldr	r1, [pc, #168]	; (8000d7c <LL_EXTI_Init+0x17c>)
 8000cd2:	684c      	ldr	r4, [r1, #4]
 8000cd4:	ea24 0403 	bic.w	r4, r4, r3
 8000cd8:	604c      	str	r4, [r1, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000cda:	680c      	ldr	r4, [r1, #0]
 8000cdc:	431c      	orrs	r4, r3
 8000cde:	4615      	mov	r5, r2
 8000ce0:	600c      	str	r4, [r1, #0]
}
 8000ce2:	2606      	movs	r6, #6
 8000ce4:	2404      	movs	r4, #4
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	e7c7      	b.n	8000c7a <LL_EXTI_Init+0x7a>
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8000cea:	4924      	ldr	r1, [pc, #144]	; (8000d7c <LL_EXTI_Init+0x17c>)
 8000cec:	6a0c      	ldr	r4, [r1, #32]
 8000cee:	ea24 0402 	bic.w	r4, r4, r2
 8000cf2:	620c      	str	r4, [r1, #32]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8000cf4:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8000cf6:	4314      	orrs	r4, r2
 8000cf8:	624c      	str	r4, [r1, #36]	; 0x24
}
 8000cfa:	e791      	b.n	8000c20 <LL_EXTI_Init+0x20>
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8000cfc:	4a1f      	ldr	r2, [pc, #124]	; (8000d7c <LL_EXTI_Init+0x17c>)
 8000cfe:	6811      	ldr	r1, [r2, #0]
 8000d00:	ea21 0103 	bic.w	r1, r1, r3
 8000d04:	6011      	str	r1, [r2, #0]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8000d06:	6851      	ldr	r1, [r2, #4]
 8000d08:	4319      	orrs	r1, r3
 8000d0a:	6051      	str	r1, [r2, #4]
}
 8000d0c:	2606      	movs	r6, #6
 8000d0e:	2404      	movs	r4, #4
 8000d10:	2202      	movs	r2, #2
 8000d12:	2500      	movs	r5, #0
 8000d14:	e7b1      	b.n	8000c7a <LL_EXTI_Init+0x7a>
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8000d16:	4a19      	ldr	r2, [pc, #100]	; (8000d7c <LL_EXTI_Init+0x17c>)
 8000d18:	6891      	ldr	r1, [r2, #8]
 8000d1a:	ea21 0103 	bic.w	r1, r1, r3
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000d1e:	6091      	str	r1, [r2, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8000d20:	68d1      	ldr	r1, [r2, #12]
 8000d22:	430b      	orrs	r3, r1
 8000d24:	60d3      	str	r3, [r2, #12]
}
 8000d26:	462b      	mov	r3, r5
 8000d28:	e770      	b.n	8000c0c <LL_EXTI_Init+0xc>
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8000d2a:	4914      	ldr	r1, [pc, #80]	; (8000d7c <LL_EXTI_Init+0x17c>)
 8000d2c:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 8000d2e:	ea20 0002 	bic.w	r0, r0, r2
 8000d32:	62c8      	str	r0, [r1, #44]	; 0x2c
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8000d34:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8000d36:	4302      	orrs	r2, r0
 8000d38:	628a      	str	r2, [r1, #40]	; 0x28
}
 8000d3a:	e790      	b.n	8000c5e <LL_EXTI_Init+0x5e>
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8000d3c:	490f      	ldr	r1, [pc, #60]	; (8000d7c <LL_EXTI_Init+0x17c>)
 8000d3e:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8000d40:	4310      	orrs	r0, r2
 8000d42:	6288      	str	r0, [r1, #40]	; 0x28
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8000d44:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 8000d46:	4302      	orrs	r2, r0
 8000d48:	62ca      	str	r2, [r1, #44]	; 0x2c
}
 8000d4a:	e788      	b.n	8000c5e <LL_EXTI_Init+0x5e>
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8000d4c:	490b      	ldr	r1, [pc, #44]	; (8000d7c <LL_EXTI_Init+0x17c>)
 8000d4e:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8000d50:	ea20 0002 	bic.w	r0, r0, r2
 8000d54:	6288      	str	r0, [r1, #40]	; 0x28
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8000d56:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 8000d58:	4302      	orrs	r2, r0
 8000d5a:	62ca      	str	r2, [r1, #44]	; 0x2c
}
 8000d5c:	e77f      	b.n	8000c5e <LL_EXTI_Init+0x5e>
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8000d5e:	4a07      	ldr	r2, [pc, #28]	; (8000d7c <LL_EXTI_Init+0x17c>)
 8000d60:	68d1      	ldr	r1, [r2, #12]
 8000d62:	ea21 0103 	bic.w	r1, r1, r3
 8000d66:	60d1      	str	r1, [r2, #12]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000d68:	6891      	ldr	r1, [r2, #8]
 8000d6a:	430b      	orrs	r3, r1
 8000d6c:	6093      	str	r3, [r2, #8]
}
 8000d6e:	462b      	mov	r3, r5
 8000d70:	e74c      	b.n	8000c0c <LL_EXTI_Init+0xc>
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000d72:	4a02      	ldr	r2, [pc, #8]	; (8000d7c <LL_EXTI_Init+0x17c>)
 8000d74:	6891      	ldr	r1, [r2, #8]
 8000d76:	4319      	orrs	r1, r3
 8000d78:	e7d1      	b.n	8000d1e <LL_EXTI_Init+0x11e>
 8000d7a:	bf00      	nop
 8000d7c:	40010400 	.word	0x40010400

08000d80 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000d84:	680d      	ldr	r5, [r1, #0]
 8000d86:	fa95 f2a5 	rbit	r2, r5
  return __builtin_clz(value);
 8000d8a:	fab2 f282 	clz	r2, r2

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000d8e:	fa35 f302 	lsrs.w	r3, r5, r2
 8000d92:	f000 8089 	beq.w	8000ea8 <LL_GPIO_Init+0x128>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8000d96:	2601      	movs	r6, #1
 8000d98:	f04f 0c03 	mov.w	ip, #3
 8000d9c:	f04f 080f 	mov.w	r8, #15
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000da0:	ea6f 0e05 	mvn.w	lr, r5
 8000da4:	e038      	b.n	8000e18 <LL_GPIO_Init+0x98>
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000da6:	f8d1 9010 	ldr.w	r9, [r1, #16]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000daa:	f8d0 a00c 	ldr.w	sl, [r0, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dae:	fa93 f7a3 	rbit	r7, r3
  if (value == 0U)
 8000db2:	b137      	cbz	r7, 8000dc2 <LL_GPIO_Init+0x42>
  return __builtin_clz(value);
 8000db4:	fab7 f787 	clz	r7, r7
 8000db8:	007f      	lsls	r7, r7, #1
 8000dba:	fa0c f707 	lsl.w	r7, ip, r7
 8000dbe:	ea2a 0a07 	bic.w	sl, sl, r7
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dc2:	fa93 f7a3 	rbit	r7, r3
  if (value == 0U)
 8000dc6:	2f00      	cmp	r7, #0
 8000dc8:	d073      	beq.n	8000eb2 <LL_GPIO_Init+0x132>
  return __builtin_clz(value);
 8000dca:	fab7 f787 	clz	r7, r7
 8000dce:	007f      	lsls	r7, r7, #1
 8000dd0:	fa09 f707 	lsl.w	r7, r9, r7
 8000dd4:	ea47 070a 	orr.w	r7, r7, sl

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000dd8:	2c02      	cmp	r4, #2
 8000dda:	60c7      	str	r7, [r0, #12]
 8000ddc:	d048      	beq.n	8000e70 <LL_GPIO_Init+0xf0>
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000dde:	6807      	ldr	r7, [r0, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000de0:	fa93 f9a3 	rbit	r9, r3
  if (value == 0U)
 8000de4:	f1b9 0f00 	cmp.w	r9, #0
 8000de8:	d007      	beq.n	8000dfa <LL_GPIO_Init+0x7a>
  return __builtin_clz(value);
 8000dea:	fab9 f989 	clz	r9, r9
 8000dee:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8000df2:	fa0c f909 	lsl.w	r9, ip, r9
 8000df6:	ea27 0709 	bic.w	r7, r7, r9
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dfa:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d055      	beq.n	8000eae <LL_GPIO_Init+0x12e>
  return __builtin_clz(value);
 8000e02:	fab3 f383 	clz	r3, r3
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	fa04 f303 	lsl.w	r3, r4, r3
 8000e0c:	433b      	orrs	r3, r7
 8000e0e:	6003      	str	r3, [r0, #0]
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
    }
    pinpos++;
 8000e10:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000e12:	fa35 f302 	lsrs.w	r3, r5, r2
 8000e16:	d047      	beq.n	8000ea8 <LL_GPIO_Init+0x128>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8000e18:	fa06 f302 	lsl.w	r3, r6, r2
    if (currentpin != 0x00u)
 8000e1c:	402b      	ands	r3, r5
 8000e1e:	d0f7      	beq.n	8000e10 <LL_GPIO_Init+0x90>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000e20:	684c      	ldr	r4, [r1, #4]
 8000e22:	1e67      	subs	r7, r4, #1
 8000e24:	2f01      	cmp	r7, #1
 8000e26:	d8be      	bhi.n	8000da6 <LL_GPIO_Init+0x26>
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000e28:	f8d1 9008 	ldr.w	r9, [r1, #8]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8000e2c:	f8d0 a008 	ldr.w	sl, [r0, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e30:	fa93 f7a3 	rbit	r7, r3
  if (value == 0U)
 8000e34:	b137      	cbz	r7, 8000e44 <LL_GPIO_Init+0xc4>
  return __builtin_clz(value);
 8000e36:	fab7 f787 	clz	r7, r7
 8000e3a:	007f      	lsls	r7, r7, #1
 8000e3c:	fa0c f707 	lsl.w	r7, ip, r7
 8000e40:	ea2a 0a07 	bic.w	sl, sl, r7
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e44:	fa93 f7a3 	rbit	r7, r3
  if (value == 0U)
 8000e48:	2f00      	cmp	r7, #0
 8000e4a:	d050      	beq.n	8000eee <LL_GPIO_Init+0x16e>
  return __builtin_clz(value);
 8000e4c:	fab7 f787 	clz	r7, r7
 8000e50:	007f      	lsls	r7, r7, #1
 8000e52:	fa09 f707 	lsl.w	r7, r9, r7
 8000e56:	ea47 070a 	orr.w	r7, r7, sl
 8000e5a:	6087      	str	r7, [r0, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000e5c:	6847      	ldr	r7, [r0, #4]
 8000e5e:	ea0e 0907 	and.w	r9, lr, r7
 8000e62:	68cf      	ldr	r7, [r1, #12]
 8000e64:	fb07 f705 	mul.w	r7, r7, r5
 8000e68:	ea49 0707 	orr.w	r7, r9, r7
 8000e6c:	6047      	str	r7, [r0, #4]
}
 8000e6e:	e79a      	b.n	8000da6 <LL_GPIO_Init+0x26>
        if (currentpin < LL_GPIO_PIN_8)
 8000e70:	2bff      	cmp	r3, #255	; 0xff
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000e72:	f8d1 9014 	ldr.w	r9, [r1, #20]
        if (currentpin < LL_GPIO_PIN_8)
 8000e76:	d81e      	bhi.n	8000eb6 <LL_GPIO_Init+0x136>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8000e78:	f8d0 a020 	ldr.w	sl, [r0, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e7c:	fa93 f7a3 	rbit	r7, r3
  if (value == 0U)
 8000e80:	b137      	cbz	r7, 8000e90 <LL_GPIO_Init+0x110>
  return __builtin_clz(value);
 8000e82:	fab7 f787 	clz	r7, r7
 8000e86:	00bf      	lsls	r7, r7, #2
 8000e88:	fa08 f707 	lsl.w	r7, r8, r7
 8000e8c:	ea2a 0a07 	bic.w	sl, sl, r7
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e90:	fa93 f7a3 	rbit	r7, r3
  if (value == 0U)
 8000e94:	b37f      	cbz	r7, 8000ef6 <LL_GPIO_Init+0x176>
  return __builtin_clz(value);
 8000e96:	fab7 f787 	clz	r7, r7
 8000e9a:	00bf      	lsls	r7, r7, #2
 8000e9c:	fa09 f707 	lsl.w	r7, r9, r7
 8000ea0:	ea47 070a 	orr.w	r7, r7, sl
 8000ea4:	6207      	str	r7, [r0, #32]
}
 8000ea6:	e79a      	b.n	8000dde <LL_GPIO_Init+0x5e>
  }

  return (SUCCESS);
}
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000eae:	2340      	movs	r3, #64	; 0x40
 8000eb0:	e7aa      	b.n	8000e08 <LL_GPIO_Init+0x88>
 8000eb2:	2740      	movs	r7, #64	; 0x40
 8000eb4:	e78c      	b.n	8000dd0 <LL_GPIO_Init+0x50>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000eb6:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
 8000eba:	0a1f      	lsrs	r7, r3, #8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ebc:	fa97 fba7 	rbit	fp, r7
  if (value == 0U)
 8000ec0:	f1bb 0f00 	cmp.w	fp, #0
 8000ec4:	d007      	beq.n	8000ed6 <LL_GPIO_Init+0x156>
  return __builtin_clz(value);
 8000ec6:	fabb fb8b 	clz	fp, fp
 8000eca:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000ece:	fa08 fb0b 	lsl.w	fp, r8, fp
 8000ed2:	ea2a 0a0b 	bic.w	sl, sl, fp
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ed6:	fa97 f7a7 	rbit	r7, r7
  if (value == 0U)
 8000eda:	b157      	cbz	r7, 8000ef2 <LL_GPIO_Init+0x172>
  return __builtin_clz(value);
 8000edc:	fab7 f787 	clz	r7, r7
 8000ee0:	00bf      	lsls	r7, r7, #2
 8000ee2:	fa09 f707 	lsl.w	r7, r9, r7
 8000ee6:	ea47 070a 	orr.w	r7, r7, sl
 8000eea:	6247      	str	r7, [r0, #36]	; 0x24
}
 8000eec:	e777      	b.n	8000dde <LL_GPIO_Init+0x5e>
 8000eee:	2740      	movs	r7, #64	; 0x40
 8000ef0:	e7af      	b.n	8000e52 <LL_GPIO_Init+0xd2>
 8000ef2:	2780      	movs	r7, #128	; 0x80
 8000ef4:	e7f5      	b.n	8000ee2 <LL_GPIO_Init+0x162>
 8000ef6:	2780      	movs	r7, #128	; 0x80
 8000ef8:	e7d0      	b.n	8000e9c <LL_GPIO_Init+0x11c>
 8000efa:	bf00      	nop

08000efc <LL_SPI_Init>:
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8000efc:	6803      	ldr	r3, [r0, #0]
 8000efe:	065b      	lsls	r3, r3, #25
 8000f00:	d42d      	bmi.n	8000f5e <LL_SPI_Init+0x62>
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8000f02:	b470      	push	{r4, r5, r6}
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8000f04:	e9d1 3600 	ldrd	r3, r6, [r1]
 8000f08:	e9d1 5403 	ldrd	r5, r4, [r1, #12]
 8000f0c:	4333      	orrs	r3, r6
 8000f0e:	694a      	ldr	r2, [r1, #20]
 8000f10:	432b      	orrs	r3, r5
 8000f12:	e9d1 5606 	ldrd	r5, r6, [r1, #24]
 8000f16:	4323      	orrs	r3, r4
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	6804      	ldr	r4, [r0, #0]
 8000f1c:	432b      	orrs	r3, r5
 8000f1e:	6a0d      	ldr	r5, [r1, #32]
 8000f20:	4333      	orrs	r3, r6
 8000f22:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8000f26:	f024 04bf 	bic.w	r4, r4, #191	; 0xbf
 8000f2a:	432b      	orrs	r3, r5
 8000f2c:	4323      	orrs	r3, r4
 8000f2e:	6003      	str	r3, [r0, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8000f30:	6843      	ldr	r3, [r0, #4]
 8000f32:	688c      	ldr	r4, [r1, #8]
 8000f34:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000f38:	f023 0304 	bic.w	r3, r3, #4
 8000f3c:	ea44 4212 	orr.w	r2, r4, r2, lsr #16
 8000f40:	431a      	orrs	r2, r3
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 8000f42:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
    MODIFY_REG(SPIx->CR2,
 8000f46:	6042      	str	r2, [r0, #4]
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 8000f48:	d203      	bcs.n	8000f52 <LL_SPI_Init+0x56>
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8000f4a:	6843      	ldr	r3, [r0, #4]
 8000f4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f50:	6043      	str	r3, [r0, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8000f52:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8000f56:	d004      	beq.n	8000f62 <LL_SPI_Init+0x66>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
    }
    status = SUCCESS;
 8000f58:	2000      	movs	r0, #0
  }

  return status;
}
 8000f5a:	bc70      	pop	{r4, r5, r6}
 8000f5c:	4770      	bx	lr
  ErrorStatus status = ERROR;
 8000f5e:	2001      	movs	r0, #1
}
 8000f60:	4770      	bx	lr
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8000f62:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
 8000f64:	6103      	str	r3, [r0, #16]
 8000f66:	bc70      	pop	{r4, r5, r6}
    status = SUCCESS;
 8000f68:	2000      	movs	r0, #0
}
 8000f6a:	4770      	bx	lr

08000f6c <LL_TIM_Init>:
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000f6c:	4a28      	ldr	r2, [pc, #160]	; (8001010 <LL_TIM_Init+0xa4>)
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8000f6e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000f70:	4290      	cmp	r0, r2
{
 8000f72:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000f74:	d038      	beq.n	8000fe8 <LL_TIM_Init+0x7c>
 8000f76:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000f7a:	d021      	beq.n	8000fc0 <LL_TIM_Init+0x54>
 8000f7c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000f80:	4290      	cmp	r0, r2
 8000f82:	d01d      	beq.n	8000fc0 <LL_TIM_Init+0x54>
 8000f84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f88:	4290      	cmp	r0, r2
 8000f8a:	d019      	beq.n	8000fc0 <LL_TIM_Init+0x54>
 8000f8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f90:	4290      	cmp	r0, r2
 8000f92:	d015      	beq.n	8000fc0 <LL_TIM_Init+0x54>
 8000f94:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8000f98:	4290      	cmp	r0, r2
 8000f9a:	d025      	beq.n	8000fe8 <LL_TIM_Init+0x7c>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000f9c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8000fa0:	4290      	cmp	r0, r2
 8000fa2:	d031      	beq.n	8001008 <LL_TIM_Init+0x9c>
 8000fa4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fa8:	4290      	cmp	r0, r2
 8000faa:	d02d      	beq.n	8001008 <LL_TIM_Init+0x9c>
 8000fac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fb0:	4290      	cmp	r0, r2
 8000fb2:	d029      	beq.n	8001008 <LL_TIM_Init+0x9c>

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8000fb4:	688c      	ldr	r4, [r1, #8]

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8000fb6:	880a      	ldrh	r2, [r1, #0]
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8000fb8:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8000fba:	62c4      	str	r4, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 8000fbc:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000fbe:	e00c      	b.n	8000fda <LL_TIM_Init+0x6e>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8000fc0:	684a      	ldr	r2, [r1, #4]
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8000fc2:	e9d1 4502 	ldrd	r4, r5, [r1, #8]
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8000fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fca:	4313      	orrs	r3, r2
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8000fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8000fd0:	880a      	ldrh	r2, [r1, #0]
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8000fd2:	432b      	orrs	r3, r5
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8000fd4:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8000fd6:	62c4      	str	r4, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 8000fd8:	6282      	str	r2, [r0, #40]	; 0x28
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8000fda:	6943      	ldr	r3, [r0, #20]
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 8000fe2:	bc30      	pop	{r4, r5}
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	4770      	bx	lr
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8000fe8:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8000fea:	68cc      	ldr	r4, [r1, #12]
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8000fec:	880a      	ldrh	r2, [r1, #0]
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8000fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ff2:	432b      	orrs	r3, r5
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8000ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ff8:	4323      	orrs	r3, r4
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8000ffa:	6003      	str	r3, [r0, #0]
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8000ffc:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 8000ffe:	62c3      	str	r3, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 8001000:	6282      	str	r2, [r0, #40]	; 0x28
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001002:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001004:	6303      	str	r3, [r0, #48]	; 0x30
}
 8001006:	e7e8      	b.n	8000fda <LL_TIM_Init+0x6e>
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001008:	68cc      	ldr	r4, [r1, #12]
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800100a:	880a      	ldrh	r2, [r1, #0]
 800100c:	e7f2      	b.n	8000ff4 <LL_TIM_Init+0x88>
 800100e:	bf00      	nop
 8001010:	40012c00 	.word	0x40012c00

08001014 <LL_TIM_OC_Init>:
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  ErrorStatus result = ERROR;

  switch (Channel)
 8001014:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
{
 8001018:	b4f0      	push	{r4, r5, r6, r7}
  switch (Channel)
 800101a:	f000 811a 	beq.w	8001252 <LL_TIM_OC_Init+0x23e>
 800101e:	d84f      	bhi.n	80010c0 <LL_TIM_OC_Init+0xac>
 8001020:	2910      	cmp	r1, #16
 8001022:	f000 8153 	beq.w	80012cc <LL_TIM_OC_Init+0x2b8>
 8001026:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800102a:	f040 808a 	bne.w	8001142 <LL_TIM_OC_Init+0x12e>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800102e:	6a04      	ldr	r4, [r0, #32]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001030:	f8d2 c010 	ldr.w	ip, [r2, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001034:	4da4      	ldr	r5, [pc, #656]	; (80012c8 <LL_TIM_OC_Init+0x2b4>)
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001036:	f424 7480 	bic.w	r4, r4, #256	; 0x100
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800103a:	e9d2 6700 	ldrd	r6, r7, [r2]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800103e:	6204      	str	r4, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001040:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001042:	6844      	ldr	r4, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001044:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001046:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800104a:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800104e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8001052:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001056:	f021 0173 	bic.w	r1, r1, #115	; 0x73
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800105a:	42a8      	cmp	r0, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800105c:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001060:	ea41 0106 	orr.w	r1, r1, r6
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001064:	d00f      	beq.n	8001086 <LL_TIM_OC_Init+0x72>
 8001066:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800106a:	42a8      	cmp	r0, r5
 800106c:	d00b      	beq.n	8001086 <LL_TIM_OC_Init+0x72>
 800106e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001072:	42a8      	cmp	r0, r5
 8001074:	d007      	beq.n	8001086 <LL_TIM_OC_Init+0x72>
 8001076:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800107a:	42a8      	cmp	r0, r5
 800107c:	d003      	beq.n	8001086 <LL_TIM_OC_Init+0x72>
 800107e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001082:	42a8      	cmp	r0, r5
 8001084:	d113      	bne.n	80010ae <LL_TIM_OC_Init+0x9a>

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8001086:	e9d2 6705 	ldrd	r6, r7, [r2, #20]
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800108a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800108e:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8001092:	ea43 2386 	orr.w	r3, r3, r6, lsl #10

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8001096:	69d5      	ldr	r5, [r2, #28]
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8001098:	6896      	ldr	r6, [r2, #8]
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800109a:	ea44 1407 	orr.w	r4, r4, r7, lsl #4
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800109e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80010a2:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80010a6:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80010aa:	ea44 1445 	orr.w	r4, r4, r5, lsl #5

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80010ae:	68d5      	ldr	r5, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80010b0:	6044      	str	r4, [r0, #4]
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80010b2:	2200      	movs	r2, #0
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80010b4:	61c1      	str	r1, [r0, #28]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80010b6:	63c5      	str	r5, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80010b8:	6203      	str	r3, [r0, #32]
}
 80010ba:	bcf0      	pop	{r4, r5, r6, r7}
 80010bc:	4610      	mov	r0, r2
 80010be:	4770      	bx	lr
  switch (Channel)
 80010c0:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80010c4:	f000 808b 	beq.w	80011de <LL_TIM_OC_Init+0x1ca>
 80010c8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80010cc:	f040 8083 	bne.w	80011d6 <LL_TIM_OC_Init+0x1c2>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80010d0:	6a04      	ldr	r4, [r0, #32]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80010d2:	6917      	ldr	r7, [r2, #16]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80010d4:	f424 1480 	bic.w	r4, r4, #1048576	; 0x100000
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80010d8:	e9d2 5600 	ldrd	r5, r6, [r2]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80010dc:	6204      	str	r4, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80010de:	6a03      	ldr	r3, [r0, #32]
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80010e0:	6d41      	ldr	r1, [r0, #84]	; 0x54

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80010e2:	4c79      	ldr	r4, [pc, #484]	; (80012c8 <LL_TIM_OC_Init+0x2b4>)
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80010e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80010e8:	ea43 5307 	orr.w	r3, r3, r7, lsl #20
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80010ec:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80010f0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80010f4:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80010f8:	42a0      	cmp	r0, r4
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80010fa:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80010fe:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001102:	d00f      	beq.n	8001124 <LL_TIM_OC_Init+0x110>
 8001104:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8001108:	42a0      	cmp	r0, r4
 800110a:	d00b      	beq.n	8001124 <LL_TIM_OC_Init+0x110>
 800110c:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8001110:	42a0      	cmp	r0, r4
 8001112:	d007      	beq.n	8001124 <LL_TIM_OC_Init+0x110>
 8001114:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001118:	42a0      	cmp	r0, r4
 800111a:	d003      	beq.n	8001124 <LL_TIM_OC_Init+0x110>
 800111c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001120:	42a0      	cmp	r0, r4
 8001122:	d106      	bne.n	8001132 <LL_TIM_OC_Init+0x11e>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8001124:	6844      	ldr	r4, [r0, #4]
 8001126:	6995      	ldr	r5, [r2, #24]
 8001128:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 800112c:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 8001130:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8001132:	68d4      	ldr	r4, [r2, #12]
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8001134:	6541      	str	r1, [r0, #84]	; 0x54
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8001136:	2200      	movs	r2, #0
  WRITE_REG(TIMx->CCR6, CompareValue);
 8001138:	65c4      	str	r4, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800113a:	6203      	str	r3, [r0, #32]
}
 800113c:	bcf0      	pop	{r4, r5, r6, r7}
 800113e:	4610      	mov	r0, r2
 8001140:	4770      	bx	lr
  switch (Channel)
 8001142:	2901      	cmp	r1, #1
 8001144:	d147      	bne.n	80011d6 <LL_TIM_OC_Init+0x1c2>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001146:	6a04      	ldr	r4, [r0, #32]
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001148:	f8d2 c010 	ldr.w	ip, [r2, #16]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800114c:	4d5e      	ldr	r5, [pc, #376]	; (80012c8 <LL_TIM_OC_Init+0x2b4>)
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800114e:	f024 0401 	bic.w	r4, r4, #1
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001152:	e9d2 6700 	ldrd	r6, r7, [r2]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001156:	6204      	str	r4, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001158:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800115a:	6844      	ldr	r4, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800115c:	6981      	ldr	r1, [r0, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800115e:	f023 0302 	bic.w	r3, r3, #2
 8001162:	ea43 030c 	orr.w	r3, r3, ip
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001166:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800116a:	f023 0301 	bic.w	r3, r3, #1
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800116e:	f021 0173 	bic.w	r1, r1, #115	; 0x73
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001172:	42a8      	cmp	r0, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001174:	ea43 0307 	orr.w	r3, r3, r7
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001178:	ea41 0106 	orr.w	r1, r1, r6
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800117c:	d00f      	beq.n	800119e <LL_TIM_OC_Init+0x18a>
 800117e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001182:	42a8      	cmp	r0, r5
 8001184:	d00b      	beq.n	800119e <LL_TIM_OC_Init+0x18a>
 8001186:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800118a:	42a8      	cmp	r0, r5
 800118c:	d007      	beq.n	800119e <LL_TIM_OC_Init+0x18a>
 800118e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001192:	42a8      	cmp	r0, r5
 8001194:	d003      	beq.n	800119e <LL_TIM_OC_Init+0x18a>
 8001196:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800119a:	42a8      	cmp	r0, r5
 800119c:	d112      	bne.n	80011c4 <LL_TIM_OC_Init+0x1b0>
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800119e:	e9d2 6705 	ldrd	r6, r7, [r2, #20]
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80011a2:	f023 0308 	bic.w	r3, r3, #8
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80011a6:	f424 7480 	bic.w	r4, r4, #256	; 0x100
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80011aa:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80011ae:	69d5      	ldr	r5, [r2, #28]
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80011b0:	6896      	ldr	r6, [r2, #8]
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80011b2:	433c      	orrs	r4, r7
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80011b4:	f023 0304 	bic.w	r3, r3, #4
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80011b8:	f424 7400 	bic.w	r4, r4, #512	; 0x200
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80011bc:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80011c0:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80011c4:	68d5      	ldr	r5, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80011c6:	6044      	str	r4, [r0, #4]
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80011c8:	2200      	movs	r2, #0
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80011ca:	6181      	str	r1, [r0, #24]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80011cc:	6345      	str	r5, [r0, #52]	; 0x34
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80011ce:	6203      	str	r3, [r0, #32]
}
 80011d0:	bcf0      	pop	{r4, r5, r6, r7}
 80011d2:	4610      	mov	r0, r2
 80011d4:	4770      	bx	lr
  switch (Channel)
 80011d6:	2201      	movs	r2, #1
}
 80011d8:	4610      	mov	r0, r2
 80011da:	bcf0      	pop	{r4, r5, r6, r7}
 80011dc:	4770      	bx	lr
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80011de:	6a04      	ldr	r4, [r0, #32]
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 80011e0:	6917      	ldr	r7, [r2, #16]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80011e2:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 80011e6:	e9d2 5600 	ldrd	r5, r6, [r2]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80011ea:	6204      	str	r4, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80011ec:	6a03      	ldr	r3, [r0, #32]
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80011ee:	6d41      	ldr	r1, [r0, #84]	; 0x54
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80011f0:	4c35      	ldr	r4, [pc, #212]	; (80012c8 <LL_TIM_OC_Init+0x2b4>)
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 80011f2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80011f6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 80011fa:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 80011fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8001202:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001206:	42a0      	cmp	r0, r4
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8001208:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 800120c:	ea41 0105 	orr.w	r1, r1, r5
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001210:	d00f      	beq.n	8001232 <LL_TIM_OC_Init+0x21e>
 8001212:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8001216:	42a0      	cmp	r0, r4
 8001218:	d00b      	beq.n	8001232 <LL_TIM_OC_Init+0x21e>
 800121a:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 800121e:	42a0      	cmp	r0, r4
 8001220:	d007      	beq.n	8001232 <LL_TIM_OC_Init+0x21e>
 8001222:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001226:	42a0      	cmp	r0, r4
 8001228:	d003      	beq.n	8001232 <LL_TIM_OC_Init+0x21e>
 800122a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800122e:	42a0      	cmp	r0, r4
 8001230:	d106      	bne.n	8001240 <LL_TIM_OC_Init+0x22c>
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8001232:	6844      	ldr	r4, [r0, #4]
 8001234:	6995      	ldr	r5, [r2, #24]
 8001236:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800123a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 800123e:	6044      	str	r4, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8001240:	6541      	str	r1, [r0, #84]	; 0x54
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8001242:	68d2      	ldr	r2, [r2, #12]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8001244:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8001246:	6582      	str	r2, [r0, #88]	; 0x58
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8001248:	2200      	movs	r2, #0
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800124a:	6203      	str	r3, [r0, #32]
}
 800124c:	bcf0      	pop	{r4, r5, r6, r7}
 800124e:	4610      	mov	r0, r2
 8001250:	4770      	bx	lr
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001252:	6a04      	ldr	r4, [r0, #32]
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001254:	f8d2 c010 	ldr.w	ip, [r2, #16]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001258:	4d1b      	ldr	r5, [pc, #108]	; (80012c8 <LL_TIM_OC_Init+0x2b4>)
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800125a:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800125e:	e9d2 6700 	ldrd	r6, r7, [r2]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001262:	6204      	str	r4, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001264:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001266:	6844      	ldr	r4, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001268:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800126a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800126e:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001272:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8001276:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800127a:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800127e:	42a8      	cmp	r0, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8001280:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001284:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001288:	d00f      	beq.n	80012aa <LL_TIM_OC_Init+0x296>
 800128a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800128e:	42a8      	cmp	r0, r5
 8001290:	d00b      	beq.n	80012aa <LL_TIM_OC_Init+0x296>
 8001292:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001296:	42a8      	cmp	r0, r5
 8001298:	d007      	beq.n	80012aa <LL_TIM_OC_Init+0x296>
 800129a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800129e:	42a8      	cmp	r0, r5
 80012a0:	d003      	beq.n	80012aa <LL_TIM_OC_Init+0x296>
 80012a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80012a6:	42a8      	cmp	r0, r5
 80012a8:	d104      	bne.n	80012b4 <LL_TIM_OC_Init+0x2a0>
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80012aa:	6995      	ldr	r5, [r2, #24]
 80012ac:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 80012b0:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80012b4:	68d5      	ldr	r5, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80012b6:	6044      	str	r4, [r0, #4]
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80012b8:	2200      	movs	r2, #0
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80012ba:	61c1      	str	r1, [r0, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80012bc:	6405      	str	r5, [r0, #64]	; 0x40
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80012be:	6203      	str	r3, [r0, #32]
}
 80012c0:	bcf0      	pop	{r4, r5, r6, r7}
 80012c2:	4610      	mov	r0, r2
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	40012c00 	.word	0x40012c00
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80012cc:	6a04      	ldr	r4, [r0, #32]
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80012ce:	f8d2 c010 	ldr.w	ip, [r2, #16]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80012d2:	4d23      	ldr	r5, [pc, #140]	; (8001360 <LL_TIM_OC_Init+0x34c>)
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80012d4:	f024 0410 	bic.w	r4, r4, #16
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80012d8:	e9d2 6700 	ldrd	r6, r7, [r2]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80012dc:	6204      	str	r4, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80012de:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80012e0:	6844      	ldr	r4, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80012e2:	6981      	ldr	r1, [r0, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80012e4:	f023 0320 	bic.w	r3, r3, #32
 80012e8:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80012ec:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80012f0:	f023 0310 	bic.w	r3, r3, #16
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80012f4:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80012f8:	42a8      	cmp	r0, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80012fa:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80012fe:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001302:	d00f      	beq.n	8001324 <LL_TIM_OC_Init+0x310>
 8001304:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001308:	42a8      	cmp	r0, r5
 800130a:	d00b      	beq.n	8001324 <LL_TIM_OC_Init+0x310>
 800130c:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001310:	42a8      	cmp	r0, r5
 8001312:	d007      	beq.n	8001324 <LL_TIM_OC_Init+0x310>
 8001314:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001318:	42a8      	cmp	r0, r5
 800131a:	d003      	beq.n	8001324 <LL_TIM_OC_Init+0x310>
 800131c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001320:	42a8      	cmp	r0, r5
 8001322:	d113      	bne.n	800134c <LL_TIM_OC_Init+0x338>
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8001324:	e9d2 6705 	ldrd	r6, r7, [r2, #20]
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8001328:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800132c:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8001330:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001334:	69d5      	ldr	r5, [r2, #28]
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001336:	6896      	ldr	r6, [r2, #8]
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8001338:	ea44 0487 	orr.w	r4, r4, r7, lsl #2
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800133c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001340:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001344:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001348:	ea44 04c5 	orr.w	r4, r4, r5, lsl #3
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800134c:	68d5      	ldr	r5, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800134e:	6044      	str	r4, [r0, #4]
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001350:	2200      	movs	r2, #0
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001352:	6181      	str	r1, [r0, #24]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001354:	6385      	str	r5, [r0, #56]	; 0x38
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001356:	6203      	str	r3, [r0, #32]
}
 8001358:	bcf0      	pop	{r4, r5, r6, r7}
 800135a:	4610      	mov	r0, r2
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	40012c00 	.word	0x40012c00

08001364 <LL_TIM_BDTR_Init>:
{
 8001364:	b430      	push	{r4, r5}
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8001366:	e9d1 4501 	ldrd	r4, r5, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 800136a:	7b0a      	ldrb	r2, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 800136c:	680b      	ldr	r3, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 800136e:	432a      	orrs	r2, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8001370:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001374:	4322      	orrs	r2, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8001376:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800137a:	431a      	orrs	r2, r3
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 800137c:	89cb      	ldrh	r3, [r1, #14]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 800137e:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8001380:	6a4c      	ldr	r4, [r1, #36]	; 0x24
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8001382:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001386:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8001388:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  if (IS_TIM_ADVANCED_INSTANCE(TIMx))
 800138c:	4a11      	ldr	r2, [pc, #68]	; (80013d4 <LL_TIM_BDTR_Init+0x70>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 800138e:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8001390:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
  if (IS_TIM_ADVANCED_INSTANCE(TIMx))
 8001394:	4290      	cmp	r0, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8001396:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_ADVANCED_INSTANCE(TIMx))
 800139a:	d007      	beq.n	80013ac <LL_TIM_BDTR_Init+0x48>
 800139c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013a0:	4290      	cmp	r0, r2
 80013a2:	d003      	beq.n	80013ac <LL_TIM_BDTR_Init+0x48>
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 80013a4:	6443      	str	r3, [r0, #68]	; 0x44
}
 80013a6:	bc30      	pop	{r4, r5}
 80013a8:	2000      	movs	r0, #0
 80013aa:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 80013ac:	694a      	ldr	r2, [r1, #20]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 80013ae:	6a0d      	ldr	r5, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 80013b0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80013b4:	4313      	orrs	r3, r2
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 80013b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 80013ba:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 80013be:	432b      	orrs	r3, r5
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 80013c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013c4:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 80013c6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80013ca:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 80013cc:	6443      	str	r3, [r0, #68]	; 0x44
}
 80013ce:	bc30      	pop	{r4, r5}
 80013d0:	2000      	movs	r0, #0
 80013d2:	4770      	bx	lr
 80013d4:	40012c00 	.word	0x40012c00

080013d8 <LL_Init1msTick>:
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80013d8:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <LL_Init1msTick+0x18>)
 80013da:	4a06      	ldr	r2, [pc, #24]	; (80013f4 <LL_Init1msTick+0x1c>)
 80013dc:	fba3 3000 	umull	r3, r0, r3, r0
 80013e0:	0983      	lsrs	r3, r0, #6
 80013e2:	3b01      	subs	r3, #1
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80013e4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013e6:	2105      	movs	r1, #5
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80013e8:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80013ea:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ec:	6011      	str	r1, [r2, #0]
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 80013ee:	4770      	bx	lr
 80013f0:	10624dd3 	.word	0x10624dd3
 80013f4:	e000e010 	.word	0xe000e010

080013f8 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80013f8:	4b01      	ldr	r3, [pc, #4]	; (8001400 <LL_SetSystemCoreClock+0x8>)
 80013fa:	6018      	str	r0, [r3, #0]
}
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	20000000 	.word	0x20000000

08001404 <__libc_init_array>:
 8001404:	b570      	push	{r4, r5, r6, lr}
 8001406:	4d0d      	ldr	r5, [pc, #52]	; (800143c <__libc_init_array+0x38>)
 8001408:	4c0d      	ldr	r4, [pc, #52]	; (8001440 <__libc_init_array+0x3c>)
 800140a:	1b64      	subs	r4, r4, r5
 800140c:	10a4      	asrs	r4, r4, #2
 800140e:	2600      	movs	r6, #0
 8001410:	42a6      	cmp	r6, r4
 8001412:	d109      	bne.n	8001428 <__libc_init_array+0x24>
 8001414:	4d0b      	ldr	r5, [pc, #44]	; (8001444 <__libc_init_array+0x40>)
 8001416:	4c0c      	ldr	r4, [pc, #48]	; (8001448 <__libc_init_array+0x44>)
 8001418:	f000 f820 	bl	800145c <_init>
 800141c:	1b64      	subs	r4, r4, r5
 800141e:	10a4      	asrs	r4, r4, #2
 8001420:	2600      	movs	r6, #0
 8001422:	42a6      	cmp	r6, r4
 8001424:	d105      	bne.n	8001432 <__libc_init_array+0x2e>
 8001426:	bd70      	pop	{r4, r5, r6, pc}
 8001428:	f855 3b04 	ldr.w	r3, [r5], #4
 800142c:	4798      	blx	r3
 800142e:	3601      	adds	r6, #1
 8001430:	e7ee      	b.n	8001410 <__libc_init_array+0xc>
 8001432:	f855 3b04 	ldr.w	r3, [r5], #4
 8001436:	4798      	blx	r3
 8001438:	3601      	adds	r6, #1
 800143a:	e7f2      	b.n	8001422 <__libc_init_array+0x1e>
 800143c:	08001540 	.word	0x08001540
 8001440:	08001540 	.word	0x08001540
 8001444:	08001540 	.word	0x08001540
 8001448:	08001544 	.word	0x08001544

0800144c <memset>:
 800144c:	4402      	add	r2, r0
 800144e:	4603      	mov	r3, r0
 8001450:	4293      	cmp	r3, r2
 8001452:	d100      	bne.n	8001456 <memset+0xa>
 8001454:	4770      	bx	lr
 8001456:	f803 1b01 	strb.w	r1, [r3], #1
 800145a:	e7f9      	b.n	8001450 <memset+0x4>

0800145c <_init>:
 800145c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800145e:	bf00      	nop
 8001460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001462:	bc08      	pop	{r3}
 8001464:	469e      	mov	lr, r3
 8001466:	4770      	bx	lr

08001468 <_fini>:
 8001468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800146a:	bf00      	nop
 800146c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800146e:	bc08      	pop	{r3}
 8001470:	469e      	mov	lr, r3
 8001472:	4770      	bx	lr
